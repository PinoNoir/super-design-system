<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/modal/__tests__/Modal.test.tsx">
    <testCase name="Modal Component renders the modal when open is true" duration="53"/>
    <testCase name="Modal Component does not render the modal when open is false" duration="2"/>
    <testCase name="Modal Component renders the trigger element and no modal when open is false" duration="3"/>
    <testCase name="Modal Component sets data-modal-open attribute on body when modal is open" duration="6"/>
    <testCase name="Modal Component calls onClose when the close button is clicked" duration="61"/>
    <testCase name="Modal Component calls onClose when clicking the overlay (if not disabled)" duration="61"/>
    <testCase name="Modal Component does not call onClose when clicking the overlay if disableCloseOnOverlayClick is true" duration="17"/>
    <testCase name="Modal Component calls onClose when Escape key is pressed" duration="8"/>
    <testCase name="Modal Component does not call onClose when Escape key is pressed if disableClose is true" duration="7"/>
    <testCase name="Modal Component calls onSave when the save button is clicked" duration="57"/>
    <testCase name="Modal Component renders custom button labels if provided" duration="5"/>
    <testCase name="Modal Component applies the correct width class based on the width prop" duration="9"/>
    <testCase name="Modal Component renders action buttons if provided" duration="6"/>
    <testCase name="Modal Component disables the save button when disablePrimaryButton is true" duration="3"/>
    <testCase name="Modal Component disables the close button when disableClose is true" duration="4"/>
    <testCase name="Modal Component applies custom className to the modal" duration="6"/>
    <testCase name="Modal Component renders custom footer if provided" duration="5"/>
    <testCase name="Modal Component handles Tab key navigation" duration="13"/>
    <testCase name="Modal Component sets initial focus to the provided ref when initialFocus is provided" duration="57"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/popover/__tests__/Popover.test.tsx">
    <testCase name="Popover opens the popover when trigger is clicked" duration="126"/>
    <testCase name="Popover closes the popover when close button is clicked" duration="83"/>
    <testCase name="Popover calls onOpenChange when popover is opened and closed" duration="54"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/ai-components/sidebar/__tests__/SidebarAccordion.test.tsx">
    <testCase name="Sidebar Accordion Behavior toggles multiple sections independently" duration="269"/>
    <testCase name="Sidebar Accordion Behavior hides section titles and disables toggling when sidebar is collapsed" duration="20"/>
    <testCase name="Sidebar Accordion Behavior responds to collapsed prop changes and updates UI accordingly" duration="63"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/data-table/__tests__/Table.test.tsx">
    <testCase name="Table Component Basic Rendering renders table with data" duration="184"/>
    <testCase name="Table Component Basic Rendering applies custom className and id" duration="8"/>
    <testCase name="Table Component Basic Rendering renders empty state when no data" duration="4"/>
    <testCase name="Table Component Sorting calls onSort when sortable column header is clicked" duration="30"/>
    <testCase name="Table Component Sorting shows sort direction indicator" duration="4"/>
    <testCase name="Table Component Sorting does not render sort button for non-sortable columns" duration="4"/>
    <testCase name="Table Component Row Selection handles single row selection" duration="19"/>
    <testCase name="Table Component Row Selection shows selected rows based on selectedRowIds" duration="4"/>
    <testCase name="Table Component Row Selection uses custom getIsRowSelected function" duration="4"/>
    <testCase name="Table Component Row Selection does not allow selection of disabled rows" duration="21"/>
    <testCase name="Table Component Row Selection handles selection state changes correctly" duration="18"/>
    <testCase name="Table Component Select All renders select all checkbox when enabled" duration="4"/>
    <testCase name="Table Component Select All calls onSelectAll when select all is clicked" duration="21"/>
    <testCase name="Table Component Select All shows correct select all state" duration="3"/>
    <testCase name="Table Component Select All shows indeterminate state when some rows selected" duration="3"/>
    <testCase name="Table Component Select All calls onSelectAll with false when deselecting all" duration="23"/>
    <testCase name="Table Component Pagination renders pagination when enabled" duration="6"/>
    <testCase name="Table Component Pagination calls onPageChange when pagination is used" duration="19"/>
    <testCase name="Table Component Pagination calls onPageSizeChange when page size is changed" duration="25"/>
    <testCase name="Table Component Pagination does not render pagination when disabled" duration="3"/>
    <testCase name="Table Component Server-side Features shows loading state" duration="3"/>
    <testCase name="Table Component Server-side Features shows error state with retry button" duration="22"/>
    <testCase name="Table Component Server-side Features does not show pagination in server-side mode with no data" duration="2"/>
    <testCase name="Table Component Drag and Drop adds drag handle column when draggable rows are enabled" duration="3"/>
    <testCase name="Table Component Drag and Drop calls onRowDragEnd when drag and drop is completed" duration="4"/>
    <testCase name="Table Component Custom Row Renderer uses custom row renderer when provided" duration="3"/>
    <testCase name="Table Component Custom Row Renderer passes correct context to custom row renderer" duration="2"/>
    <testCase name="Table Component Internal State Management manages internal pagination state when not controlled" duration="27"/>
    <testCase name="Table Component Internal State Management resets to first page when page size changes internally" duration="44"/>
    <testCase name="Table Component Edge Cases handles empty selectedRowIds array" duration="5"/>
    <testCase name="Table Component Edge Cases handles undefined selectedRowIds" duration="3"/>
    <testCase name="Table Component Edge Cases handles selection with mixed disabled/enabled rows" duration="40"/>
    <testCase name="Table Component Edge Cases handles row height variants" duration="7"/>
    <testCase name="Table Component Edge Cases handles default empty state rendering" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/tooltip/__tests__/Tooltip.test.tsx">
    <testCase name="Tooltip renders children correctly" duration="11"/>
    <testCase name="Tooltip shows tooltip content on hover" duration="920"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/file-uploader/__tests__/FileUploader.test.tsx">
    <testCase name="FileUploader component successful file upload" duration="57"/>
    <testCase name="FileUploader component accepts only PDF files for upload" duration="86"/>
    <testCase name="FileUploader component displays an error for files larger than max size" duration="200"/>
    <testCase name="FileUploader component handles multiple file uploads" duration="129"/>
    <testCase name="FileUploader component displays an error when too many files are uploaded" duration="120"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/currency-input/__tests__/CurrencyInputIntegration.test.tsx">
    <testCase name="CurrencyInput Integration Tests with userEvent handles realistic typing patterns" duration="73"/>
    <testCase name="CurrencyInput Integration Tests with userEvent handles backspace and editing in the middle of text" duration="59"/>
    <testCase name="CurrencyInput Integration Tests with userEvent maintains correct cursor position when editing" duration="60"/>
    <testCase name="CurrencyInput Integration Tests with userEvent handles pasting values" duration="25"/>
    <testCase name="CurrencyInput Integration Tests with userEvent handles percentage values with realistic interactions" duration="86"/>
    <testCase name="CurrencyInput Integration Tests with userEvent properly handles &quot;NA&quot; values when allowed" duration="39"/>
    <testCase name="CurrencyInput Integration Tests with userEvent handles N/A format when enabled" duration="40"/>
    <testCase name="CurrencyInput Integration Tests with userEvent changes from a number to NA value and back" duration="75"/>
    <testCase name="CurrencyInput Integration Tests with userEvent handles accessibility keyboard interactions" duration="52"/>
    <testCase name="CurrencyInput Integration Tests with userEvent works when nested in a form with multiple inputs" duration="126"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/select/__tests__/Select.test.tsx">
    <testCase name="Select renders with a placeholder" duration="15"/>
    <testCase name="Select opens dropdown when clicked" duration="24"/>
    <testCase name="Select selects an option when clicked" duration="11"/>
    <testCase name="Select displays selected value" duration="3"/>
    <testCase name="Select renders label when provided" duration="2"/>
    <testCase name="Select disables the select when disabled prop is true" duration="5"/>
    <testCase name="Select shows error message when invalid" duration="3"/>
    <testCase name="Select handles keyboard navigation" duration="219"/>
    <testCase name="Select Select and SelectMenu renders all options in the SelectMenu when opened" duration="13"/>
    <testCase name="Select Select and SelectMenu closes the SelectMenu when an option is selected" duration="20"/>
    <testCase name="Select Select and SelectMenu highlights the selected option in the SelectMenu" duration="9"/>
    <testCase name="Select Select and SelectMenu closes the SelectMenu when clicking outside" duration="221"/>
    <testCase name="Select Select and SelectMenu updates the SelectMenu width when the Select button width changes" duration="71"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useDataSearch.test.tsx">
    <testCase name="useDataSearch Hook Initialization initializes with empty search term" duration="3"/>
    <testCase name="useDataSearch Hook Initialization provides all required functions and properties" duration="2"/>
    <testCase name="useDataSearch Hook Search Term Management updates search term immediately when handleSearch is called" duration="1"/>
    <testCase name="useDataSearch Hook Search Term Management clears search term when handleClear is called" duration="2"/>
    <testCase name="useDataSearch Hook Search Term Management handles multiple rapid search term changes" duration="2"/>
    <testCase name="useDataSearch Hook Debouncing Functionality debounces search term updates with 300ms delay" duration="2"/>
    <testCase name="useDataSearch Hook Debouncing Functionality cancels previous timeout when new search is made within debounce period" duration="1"/>
    <testCase name="useDataSearch Hook Debouncing Functionality updates debounced term when clearing search" duration="2"/>
    <testCase name="useDataSearch Hook Data Filtering returns all data when search term is empty" duration="1"/>
    <testCase name="useDataSearch Hook Data Filtering filters data by name (case insensitive)" duration="2"/>
    <testCase name="useDataSearch Hook Data Filtering filters data by email" duration="1"/>
    <testCase name="useDataSearch Hook Data Filtering filters data by department" duration="2"/>
    <testCase name="useDataSearch Hook Data Filtering filters data by numeric values" duration="1"/>
    <testCase name="useDataSearch Hook Data Filtering filters data by boolean values" duration="2"/>
    <testCase name="useDataSearch Hook Data Filtering handles case insensitive searches" duration="1"/>
    <testCase name="useDataSearch Hook Data Filtering handles single character case insensitive searches" duration="1"/>
    <testCase name="useDataSearch Hook Data Filtering returns empty array when no matches found" duration="4"/>
    <testCase name="useDataSearch Hook Filter Exclusions excludes action field from search" duration="16"/>
    <testCase name="useDataSearch Hook Filter Exclusions excludes null values from search" duration="2"/>
    <testCase name="useDataSearch Hook Filter Exclusions excludes undefined values from search" duration="2"/>
    <testCase name="useDataSearch Hook Edge Cases handles empty data array" duration="1"/>
    <testCase name="useDataSearch Hook Edge Cases handles data with missing properties" duration="1"/>
    <testCase name="useDataSearch Hook Edge Cases handles special characters in search" duration="1"/>
    <testCase name="useDataSearch Hook Edge Cases handles whitespace in search terms" duration="1"/>
    <testCase name="useDataSearch Hook Function Stability maintains stable function references" duration="2"/>
    <testCase name="useDataSearch Hook Function Stability filterData function reference changes only when debouncedSearchTerm changes" duration="1"/>
    <testCase name="useDataSearch Hook TypeScript Generics works with different data types" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Options Configuration accepts and applies configuration options" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Options Configuration uses default values when no options provided" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Options Configuration respects custom debounce delay" duration="3"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Fuzzy Search Functionality falls back to exact search for short queries" duration="2"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Fuzzy Search Functionality uses fuzzy search for longer queries" duration="2"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Fuzzy Search Functionality can be disabled completely" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Fuzzy Search Functionality respects fuzzy threshold setting" duration="2"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Field-Specific Search searches only specified fields when provided" duration="2"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Field-Specific Search searches multiple specified fields" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Field-Specific Search handles nested field paths" duration="2"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestions Functionality generates suggestions from data" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestions Functionality limits suggestions to maxSuggestions setting" duration="3"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestions Functionality returns empty suggestions for short queries" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestions Functionality does not include exact matches in suggestions" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestion Interaction updates search term when suggestion is selected" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestion Interaction shows suggestions when search term meets minimum length" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestion Interaction hides suggestions when search term is too short" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Suggestion Interaction can manually control suggestion visibility" duration="3"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality hasResults Function returns true when filtered data has results" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality hasResults Function returns false when filtered data has no results" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality hasResults Function returns true for empty search term" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Enhanced handleSearch updates showSuggestions based on search term length" duration="2"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Enhanced handleSearch maintains backward compatibility with original event signature" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Enhanced handleClear clears suggestions when clearing search" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Fuzzy Score Algorithm prioritizes exact matches" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Fuzzy Score Algorithm handles partial character matches" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Error Handling handles malformed data gracefully" duration="0"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Error Handling handles empty suggestions gracefully" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Error Handling handles invalid search fields gracefully" duration="1"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Performance maintains function stability for new functions" duration="2"/>
    <testCase name="useDataSearch Hook Enhanced useDataSearch Hook - New Functionality Performance handles large datasets efficiently" duration="14"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/toast/__tests__/Toast.test.tsx">
    <testCase name="Toast Component renders with correct content and variant" duration="263"/>
    <testCase name="Toast Component calls onClose when close button is clicked" duration="36"/>
    <testCase name="Toast Component renders hyperlink when url and hyperlinkText are provided" duration="20"/>
    <testCase name="Toast Component renders additional message when provided" duration="31"/>
    <testCase name="Toast Component auto-closes after specified duration" duration="10"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/list/__tests__/List.test.tsx">
    <testCase name="List Component renders list of items correctly" duration="11"/>
    <testCase name="List Component applies custom className when provided" duration="3"/>
    <testCase name="List Component applies custom automation-id when provided" duration="4"/>
    <testCase name="List Component switches to edit mode when edit button is clicked" duration="9"/>
    <testCase name="List Component calls onDelete when delete button is clicked" duration="4"/>
    <testCase name="List Component calls onSave and exits edit mode when save button is clicked" duration="13"/>
    <testCase name="List Component exits edit mode without saving when cancel button is clicked" duration="36"/>
    <testCase name="List Component only one item can be in edit mode at a time" duration="13"/>
    <testCase name="List Component renderActions can trigger edit mode" duration="7"/>
    <testCase name="List Component renderActions custom buttons call correct functions" duration="8"/>
    <testCase name="List Component renderActions with ListItemActions-like component maintains edit functionality" duration="6"/>
    <testCase name="List Component uses renderActions when provided instead of default action bar" duration="6"/>
    <testCase name="List Component renderActions receives correct item data" duration="8"/>
    <testCase name="List Component renderActions can conditionally render different actions" duration="9"/>
    <testCase name="List Component renderActions can return null for no actions" duration="2"/>
    <testCase name="List Component edit mode still works correctly with renderActions" duration="11"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/ai-components/sidebar/__tests__/Sidebar.test.tsx">
    <testCase name="Sidebar Component Basic Rendering renders without crashing" duration="7"/>
    <testCase name="Sidebar Component Basic Rendering renders with default logo when no logo provided" duration="7"/>
    <testCase name="Sidebar Component Basic Rendering renders custom logo when provided" duration="2"/>
    <testCase name="Sidebar Component Basic Rendering renders custom header when provided" duration="1"/>
    <testCase name="Sidebar Component Basic Rendering renders footer when provided" duration="2"/>
    <testCase name="Sidebar Component Navigation Sections renders navigation sections with titles" duration="5"/>
    <testCase name="Sidebar Component Navigation Sections renders navigation items with labels" duration="4"/>
    <testCase name="Sidebar Component Navigation Sections renders navigation items with icons" duration="4"/>
    <testCase name="Sidebar Component Navigation Sections renders badges when provided" duration="26"/>
    <testCase name="Sidebar Component Navigation Sections renders links for items with href" duration="48"/>
    <testCase name="Sidebar Component Navigation Sections renders buttons for items with onClick" duration="31"/>
    <testCase name="Sidebar Component Item States applies active class to active items" duration="22"/>
    <testCase name="Sidebar Component Item States applies disabled state to disabled items" duration="26"/>
    <testCase name="Sidebar Component Item States handles click events on navigation items" duration="51"/>
    <testCase name="Sidebar Component Collapsible Functionality renders collapse button when collapsible is true" duration="8"/>
    <testCase name="Sidebar Component Collapsible Functionality does not render collapse button when collapsible is false" duration="1"/>
    <testCase name="Sidebar Component Collapsible Functionality calls onToggleCollapse when collapse button is clicked" duration="19"/>
    <testCase name="Sidebar Component Collapsible Functionality applies collapsed class when collapsed is true" duration="3"/>
    <testCase name="Sidebar Component Collapsible Functionality hides section titles when collapsed" duration="4"/>
    <testCase name="Sidebar Component Collapsible Functionality updates aria-label based on collapsed state" duration="11"/>
    <testCase name="Sidebar Component Variants applies base variant class by default" duration="3"/>
    <testCase name="Sidebar Component Variants applies compact variant class" duration="4"/>
    <testCase name="Sidebar Component Variants applies minimal variant class" duration="3"/>
    <testCase name="Sidebar Component Custom Styling applies custom className to sidebar" duration="3"/>
    <testCase name="Sidebar Component Custom Styling applies custom className to navigation buttons" duration="22"/>
    <testCase name="Sidebar Component Custom Styling applies item-specific className" duration="10"/>
    <testCase name="Sidebar Component Render Props uses custom renderHeader when provided" duration="1"/>
    <testCase name="Sidebar Component Render Props uses custom renderNavItem when provided" duration="3"/>
    <testCase name="Sidebar Component Render Props uses section-level renderItem when provided" duration="1"/>
    <testCase name="Sidebar Component Element Customization renders with custom root element" duration="5"/>
    <testCase name="Sidebar Component Element Customization renders navigation items with custom element" duration="3"/>
    <testCase name="Sidebar Component Accessibility has proper ARIA labels for collapse button" duration="6"/>
    <testCase name="Sidebar Component Accessibility uses semantic navigation elements" duration="8"/>
    <testCase name="Sidebar Component Accessibility maintains focus management for keyboard navigation" duration="24"/>
    <testCase name="Sidebar Component Compound Components renders SidebarSection with title" duration="2"/>
    <testCase name="Sidebar Component Compound Components renders SidebarItem with all props" duration="10"/>
    <testCase name="Sidebar Component Compound Components renders SidebarItem as custom element" duration="3"/>
    <testCase name="Sidebar Component Error Handling handles missing sections gracefully" duration="2"/>
    <testCase name="Sidebar Component Error Handling handles empty sections array" duration="3"/>
    <testCase name="Sidebar Component Error Handling handles items without icons" duration="1"/>
    <testCase name="Sidebar Component Forward Ref forwards ref to the root element" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/checkbox/__tests__/Checkbox.test.tsx">
    <testCase name="Checkbox Component Rendering renders with a label" duration="5"/>
    <testCase name="Checkbox Component Rendering renders with a complex label (React node)" duration="6"/>
    <testCase name="Checkbox Component Rendering renders with a hidden label" duration="4"/>
    <testCase name="Checkbox Component Rendering renders with correct automation-id" duration="4"/>
    <testCase name="Checkbox Component Rendering uses default automation-id when not provided" duration="4"/>
    <testCase name="Checkbox Component Rendering assigns a unique ID when not provided" duration="3"/>
    <testCase name="Checkbox Component Rendering uses provided ID when available" duration="4"/>
    <testCase name="Checkbox Component Accessibility associates label with input using htmlFor" duration="4"/>
    <testCase name="Checkbox Component Accessibility sets aria-label when provided" duration="7"/>
    <testCase name="Checkbox Component Accessibility sets aria-labelledby when provided" duration="4"/>
    <testCase name="Checkbox Component Accessibility uses label text as aria-label when string label provided without ariaLabel" duration="3"/>
    <testCase name="Checkbox Component Accessibility adds required attribute when required prop is true" duration="4"/>
    <testCase name="Checkbox Component Accessibility adds data-required attribute to label when required" duration="2"/>
    <testCase name="Checkbox Component State and Behavior is unchecked by default" duration="4"/>
    <testCase name="Checkbox Component State and Behavior is checked when defaultChecked is true" duration="4"/>
    <testCase name="Checkbox Component State and Behavior can be controlled - checked" duration="3"/>
    <testCase name="Checkbox Component State and Behavior can be controlled - unchecked" duration="4"/>
    <testCase name="Checkbox Component State and Behavior toggles state when clicked (uncontrolled)" duration="28"/>
    <testCase name="Checkbox Component State and Behavior calls onChange handler when state changes" duration="13"/>
    <testCase name="Checkbox Component State and Behavior does not update internal state when controlled" duration="14"/>
    <testCase name="Checkbox Component Disabled State is disabled when disabled prop is true" duration="3"/>
    <testCase name="Checkbox Component Disabled State adds disabled class when disabled" duration="3"/>
    <testCase name="Checkbox Component Disabled State does not call onChange when clicked while disabled" duration="14"/>
    <testCase name="Checkbox Component Disabled State sets data-checked attribute on wrapper" duration="2"/>
    <testCase name="Checkbox Component Indeterminate State sets indeterminate property when indeterminate prop is true" duration="5"/>
    <testCase name="Checkbox Component Indeterminate State adds indeterminate class when indeterminate" duration="3"/>
    <testCase name="Checkbox Component Indeterminate State sets data-indeterminate attribute on wrapper" duration="1"/>
    <testCase name="Checkbox Component Indeterminate State updates indeterminate state when prop changes" duration="4"/>
    <testCase name="Checkbox Component Indeterminate State can be both checked and indeterminate" duration="3"/>
    <testCase name="Checkbox Component Indeterminate State can be both disabled and indeterminate" duration="4"/>
    <testCase name="Checkbox Component State Combinations handles checked + disabled state" duration="4"/>
    <testCase name="Checkbox Component State Combinations handles indeterminate + disabled state" duration="3"/>
    <testCase name="Checkbox Component State Combinations handles all states together: checked + indeterminate + disabled" duration="4"/>
    <testCase name="Checkbox Component Prop Passing passes additional props to input element" duration="6"/>
    <testCase name="Checkbox Component Prop Passing correctly passes name to input element" duration="3"/>
    <testCase name="Checkbox Component Prop Passing correctly passes value to input element" duration="4"/>
    <testCase name="Checkbox Component Prop Passing correctly passes tabIndex to input element" duration="3"/>
    <testCase name="Checkbox Component Keyboard Interactions toggles with space key" duration="15"/>
    <testCase name="Checkbox Component Keyboard Interactions toggles with enter key" duration="0"/>
    <testCase name="Checkbox Component Ref Forwarding forwards ref to the input element" duration="1"/>
    <testCase name="Checkbox Component Ref Forwarding can access and manipulate the forwarded ref" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/file-uploader/__tests__/FileCard.test.tsx">
    <testCase name="FileCard renders file information correctly" duration="7"/>
    <testCase name="FileCard renders the correct file icon based on file type" duration="4"/>
    <testCase name="FileCard renders icons for different file types" duration="7"/>
    <testCase name="FileCard renders menu items when action handlers are provided" duration="18"/>
    <testCase name="FileCard does not render menu when no action handlers are provided" duration="2"/>
    <testCase name="FileCard shows only specific menu items based on provided handlers" duration="7"/>
    <testCase name="FileCard calls handlers when menu items are clicked" duration="20"/>
    <testCase name="FileCard calls onRetryUpload when retry button is clicked" duration="10"/>
    <testCase name="FileCard renders progress bar when status is Uploading" duration="7"/>
    <testCase name="FileCard displays different message styles based on file status" duration="6"/>
    <testCase name="FileCard applies correct status class to the file card" duration="7"/>
    <testCase name="FileCard handles missing file properties gracefully" duration="6"/>
    <testCase name="FileCard generates a unique ID if none is provided" duration="2"/>
    <testCase name="FileCard uses provided ID if one is passed" duration="2"/>
    <testCase name="FileCard renders metaData when provided" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/text-input/__tests__/TextInput.test.tsx">
    <testCase name="TextInput renders with label and helper text" duration="7"/>
    <testCase name="TextInput handles value changes" duration="28"/>
    <testCase name="TextInput displays character counter when enableCounter is true" duration="2"/>
    <testCase name="TextInput updates character counter on input" duration="27"/>
    <testCase name="TextInput shows warning when exceeding maxCount" duration="41"/>
    <testCase name="TextInput disables input when disabled prop is true" duration="3"/>
    <testCase name="TextInput displays invalid state and text" duration="3"/>
    <testCase name="TextInput displays warning state and text" duration="3"/>
    <testCase name="TextInput handles readonly state" duration="3"/>
    <testCase name="TextInput handles required attribute" duration="2"/>
    <testCase name="TextInput handles different input types" duration="2"/>
    <testCase name="TextInput handles placeholder text" duration="2"/>
    <testCase name="TextInput calls onClick handler when clicked" duration="14"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useRowSelection.test.tsx">
    <testCase name="useRowSelection Hook Initialization should initialize with default values" duration="3"/>
    <testCase name="useRowSelection Hook Initialization should initialize with provided initial selected IDs" duration="1"/>
    <testCase name="useRowSelection Hook Initialization should initialize with correct multipleSelect setting" duration="1"/>
    <testCase name="useRowSelection Hook Single Row Selection Multiple Select Mode should select a single row" duration="1"/>
    <testCase name="useRowSelection Hook Single Row Selection Multiple Select Mode should select multiple rows" duration="1"/>
    <testCase name="useRowSelection Hook Single Row Selection Multiple Select Mode should deselect a row" duration="1"/>
    <testCase name="useRowSelection Hook Single Row Selection Single Select Mode should select only one row at a time" duration="1"/>
    <testCase name="useRowSelection Hook Single Row Selection Single Select Mode should deselect the current row when selecting false" duration="5"/>
    <testCase name="useRowSelection Hook Select All Functionality Multiple Select Mode should select all selectable rows" duration="1"/>
    <testCase name="useRowSelection Hook Select All Functionality Multiple Select Mode should deselect all rows" duration="1"/>
    <testCase name="useRowSelection Hook Select All Functionality Multiple Select Mode should merge with existing selections" duration="1"/>
    <testCase name="useRowSelection Hook Select All Functionality Single Select Mode should select only the first selectable row" duration="1"/>
    <testCase name="useRowSelection Hook Select All Functionality Single Select Mode should handle empty data gracefully" duration="1"/>
    <testCase name="useRowSelection Hook Selection State Checks should correctly identify when all visible rows are selected" duration="1"/>
    <testCase name="useRowSelection Hook Selection State Checks should correctly identify when some rows are selected" duration="1"/>
    <testCase name="useRowSelection Hook Selection State Checks should correctly identify when no rows are selected" duration="2"/>
    <testCase name="useRowSelection Hook Selection State Checks should handle data with all disabled rows" duration="0"/>
    <testCase name="useRowSelection Hook Utility Methods Batch Operations should select multiple rows with selectRows" duration="0"/>
    <testCase name="useRowSelection Hook Utility Methods Batch Operations should deselect multiple rows with deselectRows" duration="1"/>
    <testCase name="useRowSelection Hook Utility Methods Batch Operations should handle duplicate IDs in batch operations" duration="1"/>
    <testCase name="useRowSelection Hook Utility Methods Single Row Operations should select single row with selectRow" duration="1"/>
    <testCase name="useRowSelection Hook Utility Methods Single Row Operations should deselect single row with deselectRow" duration="1"/>
    <testCase name="useRowSelection Hook Utility Methods Single Row Operations should toggle row selection with toggleRow" duration="1"/>
    <testCase name="useRowSelection Hook Utility Methods Data Utilities should return selected rows data with getSelectedRows" duration="0"/>
    <testCase name="useRowSelection Hook Utility Methods Data Utilities should clear all selections with clearSelection" duration="1"/>
    <testCase name="useRowSelection Hook Utility Methods Data Utilities should select all visible rows with selectAllRows" duration="1"/>
    <testCase name="useRowSelection Hook Utility Methods Data Utilities should deselect all rows with deselectAllRows" duration="1"/>
    <testCase name="useRowSelection Hook External Callbacks should call onSelectionChange callback when provided" duration="1"/>
    <testCase name="useRowSelection Hook External Callbacks should call onSelectionChange for bulk selectAll operation" duration="1"/>
    <testCase name="useRowSelection Hook External Callbacks should work without external callback" duration="1"/>
    <testCase name="useRowSelection Hook Edge Cases should handle selecting non-existent row IDs" duration="1"/>
    <testCase name="useRowSelection Hook Edge Cases should handle deselecting non-selected rows" duration="1"/>
    <testCase name="useRowSelection Hook Edge Cases should maintain selection order" duration="1"/>
    <testCase name="useRowSelection Hook Edge Cases should handle single select mode with batch operations" duration="1"/>
    <testCase name="useRowSelection Hook Edge Cases should handle different source types" duration="1"/>
    <testCase name="useRowSelection Hook Performance and Stability should maintain referential stability of handlers" duration="1"/>
    <testCase name="useRowSelection Hook Performance and Stability should handle rapid selection changes" duration="1"/>
    <testCase name="useRowSelection Hook Performance and Stability should work with custom row ID extraction" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/input-fields/components/__tests__/BaseInput.test.tsx">
    <testCase name="BaseInput renders with label and helper text" duration="7"/>
    <testCase name="BaseInput handles value changes" duration="30"/>
    <testCase name="BaseInput displays character counter when enableCounter is true" duration="3"/>
    <testCase name="BaseInput updates character counter on input" duration="28"/>
    <testCase name="BaseInput shows warning when exceeding maxCount" duration="36"/>
    <testCase name="BaseInput disables input when disabled prop is true" duration="2"/>
    <testCase name="BaseInput displays invalid state and text" duration="3"/>
    <testCase name="BaseInput displays warning state and text" duration="3"/>
    <testCase name="BaseInput handles readonly state" duration="2"/>
    <testCase name="BaseInput handles required attribute" duration="3"/>
    <testCase name="BaseInput handles different input types" duration="2"/>
    <testCase name="BaseInput handles placeholder text" duration="1"/>
    <testCase name="BaseInput calls onClick handler when clicked" duration="14"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/avatar/__tests__/Avatar.test.tsx">
    <testCase name="Avatar component renders user avatar image when logged in and src is provided" duration="4"/>
    <testCase name="Avatar component renders user initials when logged in but no src is provided" duration="1"/>
    <testCase name="Avatar component renders default placeholder when not logged in" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/box/__tests__/Box.test.tsx">
    <testCase name="Box Component Basic Rendering renders a div by default" duration="3"/>
    <testCase name="Box Component Basic Rendering renders different HTML elements using the &quot;as&quot; prop" duration="1"/>
    <testCase name="Box Component Basic Rendering renders children correctly" duration="1"/>
    <testCase name="Box Component Basic Rendering forwards refs correctly" duration="1"/>
    <testCase name="Box Component Design Token Integration applies color design tokens correctly" duration="4"/>
    <testCase name="Box Component Design Token Integration applies spacing design tokens correctly" duration="2"/>
    <testCase name="Box Component Design Token Integration applies size design tokens correctly" duration="2"/>
    <testCase name="Box Component Design Token Integration applies border radius design tokens correctly" duration="1"/>
    <testCase name="Box Component Design Token Integration applies shadow design tokens correctly" duration="2"/>
    <testCase name="Box Component Design Token Integration applies typography design tokens correctly" duration="2"/>
    <testCase name="Box Component Design Token Integration applies z-index design tokens correctly" duration="2"/>
    <testCase name="Box Component Layout Properties applies display properties correctly" duration="1"/>
    <testCase name="Box Component Layout Properties applies flexbox properties correctly" duration="2"/>
    <testCase name="Box Component Layout Properties applies position properties correctly" duration="2"/>
    <testCase name="Box Component Responsive Values handles responsive object values (using base value)" duration="2"/>
    <testCase name="Box Component HTML Attributes and Props passes through standard HTML attributes" duration="1"/>
    <testCase name="Box Component HTML Attributes and Props combines custom className with generated styles" duration="1"/>
    <testCase name="Box Component HTML Attributes and Props merges style prop with generated styles" duration="2"/>
    <testCase name="Box Component Component Props Separation correctly separates CSS props from HTML props" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useDataSort.test.ts">
    <testCase name="useDataSort Hook Initialization should initialize with default values" duration="2"/>
    <testCase name="useDataSort Hook Initialization should initialize with provided default sort key" duration="1"/>
    <testCase name="useDataSort Hook Initialization should return unsorted data when not sorted yet" duration="1"/>
    <testCase name="useDataSort Hook Basic Sorting Functionality should sort by string field ascending on first click" duration="12"/>
    <testCase name="useDataSort Hook Basic Sorting Functionality should toggle to descending on second click of same field" duration="8"/>
    <testCase name="useDataSort Hook Basic Sorting Functionality should reset to ascending when clicking different field" duration="2"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting Number Sorting should sort numbers correctly" duration="1"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting Number Sorting should handle optional number fields with null/undefined values" duration="1"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting Numeric String Sorting should sort numeric strings as numbers" duration="1"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting Boolean Sorting should sort boolean values correctly" duration="1"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting Date Sorting should sort Date objects correctly" duration="1"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting Date Sorting should sort date strings correctly" duration="1"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting String Sorting should sort strings with locale-aware comparison" duration="1"/>
    <testCase name="useDataSort Hook Data Type Specific Sorting String Sorting should handle string fields with null values" duration="1"/>
    <testCase name="useDataSort Hook Edge Cases and Error Handling should handle empty arrays" duration="1"/>
    <testCase name="useDataSort Hook Edge Cases and Error Handling should handle invalid sort keys gracefully" duration="1"/>
    <testCase name="useDataSort Hook Edge Cases and Error Handling should handle objects without the sort key" duration="1"/>
    <testCase name="useDataSort Hook Edge Cases and Error Handling should handle mixed data types in the same field" duration="1"/>
    <testCase name="useDataSort Hook Edge Cases and Error Handling should maintain original array immutability" duration="1"/>
    <testCase name="useDataSort Hook Manual Sort Direction Control should allow manual sort direction setting" duration="1"/>
    <testCase name="useDataSort Hook Manual Sort Direction Control should reset to none when manually set" duration="1"/>
    <testCase name="useDataSort Hook Performance and Stability should maintain referential stability of functions" duration="1"/>
    <testCase name="useDataSort Hook Performance and Stability should handle large datasets efficiently" duration="75"/>
    <testCase name="useDataSort Hook Integration Scenarios should work with complex sorting sequences" duration="2"/>
    <testCase name="useDataSort Hook Integration Scenarios should handle dynamic data updates" duration="1"/>
    <testCase name="useDataSort Hook Type Safety and Generics should work with different data types" duration="1"/>
    <testCase name="useDataSort Hook Type Safety and Generics should maintain type safety in returned data" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/split-button/__tests__/SplitButton.test.tsx">
    <testCase name="SplitButton renders correctly" duration="7"/>
    <testCase name="SplitButton calls onClick when main button is clicked" duration="2"/>
    <testCase name="SplitButton opens dropdown menu when trigger is clicked" duration="19"/>
    <testCase name="SplitButton calls appropriate onClick when dropdown item is selected" duration="28"/>
    <testCase name="SplitButton renders icons in dropdown items when provided" duration="16"/>
    <testCase name="SplitButton disables trigger when triggerDisabled prop is true" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/dropdown/__tests__/DropdownSubmenu.test.tsx">
    <testCase name="DropdownSubmenu renders correctly with all props" duration="70"/>
    <testCase name="DropdownSubmenu opens submenu on click" duration="7"/>
    <testCase name="DropdownSubmenu opens submenu on Enter key press" duration="5"/>
    <testCase name="DropdownSubmenu opens submenu on Space key press" duration="7"/>
    <testCase name="DropdownSubmenu opens submenu on mouse enter" duration="6"/>
    <testCase name="DropdownSubmenu closes submenu after mouse leave with delay" duration="12"/>
    <testCase name="DropdownSubmenu cancels timeout on re-enter" duration="8"/>
    <testCase name="DropdownSubmenu has correct accessibility attributes" duration="4"/>
    <testCase name="DropdownSubmenu renders without optional props" duration="2"/>
    <testCase name="DropdownSubmenu has the automation-id attribute" duration="4"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/input-fields/utils/__tests__/format-utils.test.ts">
    <testCase name="Input Utility Functions detectCardType should detect visa card type for 4111111111111111" duration="1"/>
    <testCase name="Input Utility Functions detectCardType should detect mastercard card type for 5500000000000004" duration="1"/>
    <testCase name="Input Utility Functions detectCardType should detect amex card type for 340000000000009" duration="0"/>
    <testCase name="Input Utility Functions detectCardType should detect discover card type for 6011000000000004" duration="0"/>
    <testCase name="Input Utility Functions detectCardType should detect dinersclub card type for 30000000000004" duration="1"/>
    <testCase name="Input Utility Functions detectCardType should detect jcb card type for 3530111333300000" duration="0"/>
    <testCase name="Input Utility Functions detectCardType should detect unknown card type for 9999999999999999" duration="0"/>
    <testCase name="Input Utility Functions detectCardType should handle card numbers with spaces and dashes" duration="0"/>
    <testCase name="Input Utility Functions formatCurrencyWithLocale should format USD currency by default" duration="8"/>
    <testCase name="Input Utility Functions formatCurrencyWithLocale should support different locales" duration="0"/>
    <testCase name="Input Utility Functions formatCurrencyWithLocale should handle invalid inputs" duration="0"/>
    <testCase name="Input Utility Functions formatCurrencyWithLocale should handle inputs with non-numeric characters" duration="0"/>
    <testCase name="Input Utility Functions formatTimeWithFormat 24-hour format should format hours correctly" duration="0"/>
    <testCase name="Input Utility Functions formatTimeWithFormat 24-hour format should format hours and minutes" duration="0"/>
    <testCase name="Input Utility Functions formatTimeWithFormat 12-hour format should format hours correctly" duration="1"/>
    <testCase name="Input Utility Functions formatTimeWithFormat 12-hour format should format hours and minutes" duration="0"/>
    <testCase name="Input Utility Functions formatDateTimeWithFormat should format date and time with default format" duration="1"/>
    <testCase name="Input Utility Functions formatDateTimeWithFormat should handle different date formats" duration="0"/>
    <testCase name="Input Utility Functions formatPhoneNumberWithCountry should format US phone number" duration="1"/>
    <testCase name="Input Utility Functions formatPhoneNumberWithCountry should handle unsupported countries" duration="0"/>
    <testCase name="Input Utility Functions getFormatter should return a formatter for a specific input type" duration="0"/>
    <testCase name="Input Utility Functions getFormatter should return identity function for unknown types" duration="1"/>
    <testCase name="Input Utility Functions getValidator should return a validator for a specific input type" duration="0"/>
    <testCase name="Input Utility Functions getValidator should return always true for unknown types" duration="0"/>
    <testCase name="Input Utility Functions SSNumber validator should handle empty values" duration="1"/>
    <testCase name="Input Utility Functions SSNumber validator should validate clean SS number formats" duration="0"/>
    <testCase name="Input Utility Functions SSNumber validator should reject invalid SS numbers - wrong length" duration="4"/>
    <testCase name="Input Utility Functions SSNumber validator should reject invalid SS numbers - restricted areas" duration="0"/>
    <testCase name="Input Utility Functions SSNumber validator should reject invalid SS numbers - group 0" duration="1"/>
    <testCase name="Input Utility Functions SSNumber validator should reject invalid SS numbers - serial 0" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests CCNumber formatter should format credit card number with spaces" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests CCNumber formatter should handle partial card numbers" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests CCNumber formatter should strip non-digit characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests CCNumber formatter should limit to 19 characters (16 digits + 3 spaces)" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests ZipCode formatter should format zip code" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests ZipCode formatter should limit to 5 digits" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests ZipCode formatter should strip non-digit characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Currency formatter should format currency values" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Currency formatter should handle invalid values" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Currency formatter should handle values with existing currency symbols" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Currency formatter should handle values with commas" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Percent formatter should format percentage values" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Percent formatter should handle decimal values" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Percent formatter should handle invalid values" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Percent formatter should handle values with existing percentage symbols" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Percent formatter should handle negative percentages" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Date formatter should format date strings" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Date formatter should handle partial date inputs" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Date formatter should strip non-digit characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests DateTime formatter should format datetime strings" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests DateTime formatter should handle partial date/time inputs" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Time formatter should format time strings" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Time formatter should handle partial time inputs" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Time formatter should strip non-digit characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Alpha formatter should keep only alphabetic characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Alpha formatter should handle empty strings" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Alpha formatter should handle strings with no alpha characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests AlphaNumeric formatter should keep only alphanumeric characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests AlphaNumeric formatter should handle empty strings" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests AlphaNumeric formatter should handle strings with no alphanumeric characters" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Numeric formatter should keep only numeric characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Numeric formatter should handle empty strings" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Numeric formatter should handle strings with no numeric characters" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Pass-through formatters should test Email formatter as pass-through" duration="1"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Pass-through formatters should test Password formatter as pass-through" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Pass-through formatters should test URL formatter as pass-through" duration="0"/>
    <testCase name="Input Utility Functions Individual formatters - coverage tests Pass-through formatters should test Custom formatter as pass-through" duration="0"/>
    <testCase name="Input Utility Functions Phone formatter edge cases should handle empty input" duration="0"/>
    <testCase name="Input Utility Functions Phone formatter edge cases should strip +1 prefix" duration="0"/>
    <testCase name="Input Utility Functions Phone formatter edge cases should strip leading 1" duration="0"/>
    <testCase name="Input Utility Functions Phone formatter edge cases should handle partial phone numbers" duration="0"/>
    <testCase name="Input Utility Functions Phone formatter edge cases should limit to 10 digits total" duration="0"/>
    <testCase name="Input Utility Functions Phone number validator should validate correctly formatted phone numbers" duration="0"/>
    <testCase name="Input Utility Functions Phone number validator should allow empty values" duration="1"/>
    <testCase name="Input Utility Functions Phone number validator should reject invalid formats" duration="0"/>
    <testCase name="Input Utility Functions getValidator fallback should return a function that always returns true for unknown formats" duration="1"/>
    <testCase name="Input Utility Functions SSNumber formatter edge cases should handle empty/undefined values" duration="0"/>
    <testCase name="Input Utility Functions SSNumber formatter edge cases should format partial SS numbers correctly" duration="0"/>
    <testCase name="Input Utility Functions SSNumber formatter edge cases should strip non-digit characters" duration="1"/>
    <testCase name="Input Utility Functions SSNumber formatter edge cases should limit to 9 digits" duration="0"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/combobox/__tests__/Combobox.test.tsx">
    <testCase name="Combobox renders without crashing" duration="10"/>
    <testCase name="Combobox displays options when focused" duration="14"/>
    <testCase name="Combobox filters options based on input" duration="13"/>
    <testCase name="Combobox calls onSelect when an option is clicked" duration="11"/>
    <testCase name="Combobox calls onSave when Enter is pressed with a new value" duration="8"/>
    <testCase name="Combobox displays &quot;Add New&quot; option when allowAddNew is true" duration="9"/>
    <testCase name="Combobox calls onAddNew when &quot;Add New&quot; is clicked" duration="10"/>
    <testCase name="Combobox does not display &quot;Add New&quot; option when allowAddNew is false" duration="13"/>
    <testCase name="Combobox closes the options list when Escape is pressed" duration="18"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/form/__tests__/Form.test.tsx">
    <testCase name="Form Component Rendering renders without crashing" duration="3"/>
    <testCase name="Form Component Rendering applies the correct displayName" duration="0"/>
    <testCase name="Form Component Rendering renders children correctly" duration="1"/>
    <testCase name="Form Component Rendering renders multiple children correctly" duration="2"/>
    <testCase name="Form Component Props Handling applies custom id to form element" duration="1"/>
    <testCase name="Form Component Props Handling applies custom className correctly" duration="2"/>
    <testCase name="Form Component Props Handling applies default automation-id when not provided" duration="1"/>
    <testCase name="Form Component Props Handling applies custom automation-id when provided" duration="1"/>
    <testCase name="Form Component Props Handling spreads additional props to form element" duration="1"/>
    <testCase name="Form Component Header Section renders header when provided" duration="14"/>
    <testCase name="Form Component Header Section does not render header when not provided" duration="2"/>
    <testCase name="Form Component Header Section renders helper text when provided" duration="2"/>
    <testCase name="Form Component Header Section renders helper text as ReactNode" duration="1"/>
    <testCase name="Form Component Header Section does not render helper text when not provided" duration="1"/>
    <testCase name="Form Component Footer Section renders footer when provided" duration="1"/>
    <testCase name="Form Component Footer Section does not render footer when not provided" duration="1"/>
    <testCase name="Form Component Loading State renders loader when isLoading is true" duration="1"/>
    <testCase name="Form Component Loading State does not render loader when isLoading is false" duration="1"/>
    <testCase name="Form Component Loading State does not render loader when isLoading is not provided" duration="1"/>
    <testCase name="Form Component Event Handling calls onSubmit when form is submitted" duration="3"/>
    <testCase name="Form Component Event Handling calls onReset when form is reset" duration="2"/>
    <testCase name="Form Component Event Handling handles submit event without onSubmit prop" duration="61"/>
    <testCase name="Form Component Event Handling handles reset event without onReset prop" duration="3"/>
    <testCase name="Form Component CSS Classes applies correct CSS classes to wrapper div" duration="1"/>
    <testCase name="Form Component CSS Classes applies correct CSS classes to form element" duration="2"/>
    <testCase name="Form Component CSS Classes applies custom className to both wrapper and form" duration="2"/>
    <testCase name="Form Component CSS Classes applies correct CSS class to form header" duration="6"/>
    <testCase name="Form Component CSS Classes applies correct CSS class to inner content" duration="1"/>
    <testCase name="Form Component Accessibility has proper form element" duration="1"/>
    <testCase name="Form Component Accessibility header uses proper heading level" duration="9"/>
    <testCase name="Form Component Accessibility maintains form structure for screen readers" duration="7"/>
    <testCase name="Form Component Edge Cases handles undefined children gracefully" duration="1"/>
    <testCase name="Form Component Edge Cases handles null children gracefully" duration="2"/>
    <testCase name="Form Component Edge Cases handles empty string header" duration="2"/>
    <testCase name="Form Component Edge Cases handles empty string helperText" duration="2"/>
    <testCase name="Form Component Edge Cases handles complex nested children" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/data-table/__tests__/TableButton.test.tsx">
    <testCase name="TableButton Rendering renders with correct default props" duration="3"/>
    <testCase name="TableButton Rendering renders default text based on isSelected state" duration="0"/>
    <testCase name="TableButton Rendering renders &quot;Selected&quot; text when isSelected is true" duration="0"/>
    <testCase name="TableButton Rendering renders custom children when provided" duration="1"/>
    <testCase name="TableButton Rendering renders custom children regardless of isSelected state" duration="1"/>
    <testCase name="TableButton Rendering renders with specified variant" duration="1"/>
    <testCase name="TableButton Rendering renders as disabled when disabled prop is true" duration="1"/>
    <testCase name="TableButton Rendering passes through additional props" duration="1"/>
    <testCase name="TableButton Selection Behavior calls onSelectionChange with correct parameters when clicked (unselected to selected)" duration="1"/>
    <testCase name="TableButton Selection Behavior calls onSelectionChange with correct parameters when clicked (selected to unselected)" duration="2"/>
    <testCase name="TableButton Selection Behavior passes correct context with source" duration="1"/>
    <testCase name="TableButton Selection Behavior does not call onSelectionChange when disabled" duration="1"/>
    <testCase name="TableButton Selection Behavior handles rapid selection toggles correctly" duration="2"/>
    <testCase name="TableButton Optional onClick Callback calls optional onClick callback when provided" duration="2"/>
    <testCase name="TableButton Optional onClick Callback does not call onClick when not provided" duration="1"/>
    <testCase name="TableButton Optional onClick Callback calls onClick before onSelectionChange" duration="1"/>
    <testCase name="TableButton Optional onClick Callback calls both onClick and onSelectionChange when both provided" duration="2"/>
    <testCase name="TableButton Event Handling handles event properly and calls callbacks" duration="1"/>
    <testCase name="TableButton Event Handling handles multiple rapid clicks correctly" duration="2"/>
    <testCase name="TableButton Variant Support renders with primary variant" duration="1"/>
    <testCase name="TableButton Variant Support renders with secondary variant" duration="1"/>
    <testCase name="TableButton Variant Support renders with tertiary variant" duration="1"/>
    <testCase name="TableButton Variant Support renders with base variant" duration="0"/>
    <testCase name="TableButton Variant Support renders with accent variant" duration="4"/>
    <testCase name="TableButton Variant Support renders with danger variant" duration="1"/>
    <testCase name="TableButton Variant Support uses default variant when none specified" duration="1"/>
    <testCase name="TableButton Generic Type Support works with different row data types" duration="1"/>
    <testCase name="TableButton Generic Type Support maintains type safety with generic constraints" duration="1"/>
    <testCase name="TableButton Edge Cases handles undefined onClick gracefully" duration="1"/>
    <testCase name="TableButton Edge Cases handles empty rowId" duration="1"/>
    <testCase name="TableButton Edge Cases handles special characters in rowId" duration="1"/>
    <testCase name="TableButton Edge Cases handles empty children gracefully" duration="1"/>
    <testCase name="TableButton Edge Cases handles complex children elements" duration="1"/>
    <testCase name="TableButton Edge Cases handles numeric rowId" duration="1"/>
    <testCase name="TableButton Button Props Integration always sets size to small" duration="1"/>
    <testCase name="TableButton Button Props Integration preserves disabled state" duration="1"/>
    <testCase name="TableButton Button Props Integration passes variant correctly" duration="1"/>
    <testCase name="TableButton Button Props Integration maintains accessibility attributes" duration="1"/>
    <testCase name="TableButton Accessibility has proper role and type" duration="1"/>
    <testCase name="TableButton Accessibility supports keyboard interaction" duration="1"/>
    <testCase name="TableButton Accessibility maintains accessibility when disabled" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/switch/__tests__/Switch.test.tsx">
    <testCase name="Switch component renders with label" duration="6"/>
    <testCase name="Switch component renders label on the left in inline mode" duration="3"/>
    <testCase name="Switch component renders label on the right in inline mode" duration="2"/>
    <testCase name="Switch component calls onCheckedChange when toggled" duration="8"/>
    <testCase name="Switch component respects the checked prop (controlled)" duration="6"/>
    <testCase name="Switch component respects the defaultChecked prop (uncontrolled)" duration="8"/>
    <testCase name="Switch component disables the switch when disabled is true" duration="5"/>
    <testCase name="Switch component applies custom className" duration="4"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/ai-components/file-chip/__tests__/FileChip.test.tsx">
    <testCase name="FileChip Component renders file name and size" duration="5"/>
    <testCase name="FileChip Component shows loader when isLoading is true" duration="7"/>
    <testCase name="FileChip Component calls onRemove when remove button is clicked" duration="2"/>
    <testCase name="FileChip Component calls onRetry when retry button is clicked and status is error" duration="2"/>
    <testCase name="FileChip Component renders children if provided" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/radio-button/__tests__/RadioButtonGroup.test.tsx">
    <testCase name="RadioButtonGroup renders with legend text" duration="7"/>
    <testCase name="RadioButtonGroup renders all radio buttons" duration="20"/>
    <testCase name="RadioButtonGroup selects the default option" duration="3"/>
    <testCase name="RadioButtonGroup calls onChange when a radio button is selected" duration="5"/>
    <testCase name="RadioButtonGroup disables all radio buttons when group is disabled" duration="11"/>
    <testCase name="RadioButtonGroup displays helper text when provided" duration="2"/>
    <testCase name="RadioButtonGroup displays invalid text when invalid" duration="2"/>
    <testCase name="RadioButtonGroup updates selection when valueSelected prop changes" duration="7"/>
    <testCase name="RadioButtonGroup does not allow changes when readOnly" duration="4"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/accordion/__tests__/AccordionContext.test.tsx">
    <testCase name="AccordionContext provides the expected context values" duration="4"/>
    <testCase name="AccordionContext updates openItemId when setOpenItemId is called" duration="26"/>
    <testCase name="AccordionContext passes the disabled prop correctly" duration="1"/>
    <testCase name="AccordionContext throws error when useAccordionContext is used outside provider" duration="51"/>
    <testCase name="AccordionContext multiple accordion items can interact with the same context" duration="41"/>
    <testCase name="AccordionContext context can be consumed directly using useContext" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/search-input/__tests__/Search.test.tsx">
    <testCase name="Search Component renders with default props" duration="17"/>
    <testCase name="Search Component applies custom className" duration="4"/>
    <testCase name="Search Component renders label when provided" duration="3"/>
    <testCase name="Search Component hides label when hideLabel is true" duration="2"/>
    <testCase name="Search Component disables input when disabled prop is true" duration="4"/>
    <testCase name="Search Component calls onChange when input value changes" duration="6"/>
    <testCase name="Search Component calls onClear when clear button is clicked" duration="8"/>
    <testCase name="Search Component handles expandable search correctly" duration="16"/>
    <testCase name="Search Component renders with custom placeholder" duration="2"/>
    <testCase name="Search Component handles Escape key press" duration="6"/>
    <testCase name="Search Component renders with initial value" duration="4"/>
    <testCase name="Search Component shows clear button when input has content" duration="5"/>
    <testCase name="Search Component hides clear button when input is empty" duration="5"/>
    <testCase name="Search Component handles Enter key press on expand button" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/theme-provider/__tests__/ThemeProvider.test.tsx">
    <testCase name="ThemeProvider handles null localStorage value gracefully" duration="13"/>
    <testCase name="ThemeProvider handles undefined localStorage value gracefully" duration="4"/>
    <testCase name="ThemeProvider handles empty string localStorage value gracefully" duration="4"/>
    <testCase name="ThemeProvider provides the default bcc-light theme when no theme is stored" duration="3"/>
    <testCase name="ThemeProvider uses theme from localStorage if available" duration="3"/>
    <testCase name="ThemeProvider allows theme switching and updates localStorage" duration="8"/>
    <testCase name="ThemeProvider accepts and uses defaultTheme prop" duration="3"/>
    <testCase name="ThemeProvider stored theme overrides defaultTheme prop" duration="4"/>
    <testCase name="ThemeProvider throws error when useTheme is used outside ThemeProvider" duration="60"/>
    <testCase name="ThemeProvider calls localStorage methods appropriately" duration="3"/>
    <testCase name="ThemeProvider handles theme changes correctly after initial render" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/dropdown/__tests__/DropdownMenu.test.tsx">
    <testCase name="DropdownMenu renders dropdown menu when open" duration="5"/>
    <testCase name="DropdownMenu does not render dropdown menu when closed" duration="1"/>
    <testCase name="DropdownMenu applies custom class name when provided" duration="2"/>
    <testCase name="DropdownMenu positions dropdown below trigger by default" duration="6"/>
    <testCase name="DropdownMenu positions dropdown above trigger when not enough space below" duration="8"/>
    <testCase name="DropdownMenu positions dropdown to the left when not enough space on the right" duration="3"/>
    <testCase name="DropdownMenu closes dropdown when Escape key is pressed" duration="4"/>
    <testCase name="DropdownMenu keyboard navigation - mocks the handler behavior" duration="4"/>
    <testCase name="DropdownMenu closes dropdown on outside click" duration="2"/>
    <testCase name="DropdownMenu does not close dropdown when clicking inside it" duration="11"/>
    <testCase name="DropdownMenu does not close dropdown when clicking on trigger" duration="3"/>
    <testCase name="DropdownMenu forward ref works correctly" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/text-area/__tests__/TextArea.test.tsx">
    <testCase name="TextArea Component renders with default props" duration="10"/>
    <testCase name="TextArea Component renders label when provided" duration="2"/>
    <testCase name="TextArea Component hides label when hideLabel is true" duration="2"/>
    <testCase name="TextArea Component adds required class to label when required is true" duration="1"/>
    <testCase name="TextArea Component renders helper text when provided" duration="2"/>
    <testCase name="TextArea Component renders character counter when textCounter is true" duration="1"/>
    <testCase name="TextArea Component updates character counter when typing" duration="6"/>
    <testCase name="TextArea Component disables textarea when disabled prop is true" duration="5"/>
    <testCase name="TextArea Component applies invalid attribute when invalid prop is true" duration="5"/>
    <testCase name="TextArea Component applies custom className" duration="8"/>
    <testCase name="TextArea Component forwards ref to textarea element" duration="2"/>
    <testCase name="TextArea Component passes additional props to textarea element" duration="5"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/form-block/__tests__/FormBlock.test.tsx">
    <testCase name="FormBlock renders children correctly" duration="10"/>
    <testCase name="FormBlock applies base class and default 1-column layout when no variant is provided" duration="2"/>
    <testCase name="FormBlock applies 2-column layout class when specified" duration="1"/>
    <testCase name="FormBlock applies 3-column layout class when specified" duration="1"/>
    <testCase name="FormBlock applies 4-column layout class when specified" duration="1"/>
    <testCase name="FormBlock applies row class when row prop is true" duration="1"/>
    <testCase name="FormBlock does not apply row class when row prop is false" duration="1"/>
    <testCase name="FormBlock applies custom className when provided" duration="1"/>
    <testCase name="FormBlock applies inline styles based on props" duration="4"/>
    <testCase name="FormBlock passes additional props to the div element" duration="2"/>
    <testCase name="FormBlock forwards ref to the underlying div element" duration="2"/>
    <testCase name="FormBlock combines all props and classes correctly" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/chip/__tests__/Chip.test.tsx">
    <testCase name="Chip Component renders with label" duration="3"/>
    <testCase name="Chip Component renders with avatar" duration="2"/>
    <testCase name="Chip Component renders with icon" duration="1"/>
    <testCase name="Chip Component calls onClick when clicked" duration="2"/>
    <testCase name="Chip Component calls onActiveChange when filter chip is clicked" duration="1"/>
    <testCase name="Chip Component renders delete icon when onDelete is provided" duration="2"/>
    <testCase name="Chip Component calls onDelete when delete icon is clicked" duration="2"/>
    <testCase name="Chip Component renders as anchor when href is provided" duration="4"/>
    <testCase name="Chip Component handles keyboard interactions" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/grid-item/__tests__/GridItem.test.tsx">
    <testCase name="GridItem Component renders children correctly" duration="3"/>
    <testCase name="GridItem Component applies custom className when provided" duration="1"/>
    <testCase name="GridItem Component renders with default display value (grid)" duration="3"/>
    <testCase name="GridItem Component renders with custom display value" duration="1"/>
    <testCase name="GridItem Component applies custom gap correctly" duration="7"/>
    <testCase name="GridItem Component applies column span correctly" duration="1"/>
    <testCase name="GridItem Component applies string column span correctly" duration="1"/>
    <testCase name="GridItem Component applies row span correctly" duration="1"/>
    <testCase name="GridItem Component applies string row span correctly" duration="1"/>
    <testCase name="GridItem Component applies startColumn correctly" duration="1"/>
    <testCase name="GridItem Component applies string startColumn correctly" duration="1"/>
    <testCase name="GridItem Component applies endColumn correctly" duration="2"/>
    <testCase name="GridItem Component applies string endColumn correctly" duration="1"/>
    <testCase name="GridItem Component applies startRow correctly" duration="2"/>
    <testCase name="GridItem Component applies string startRow correctly" duration="2"/>
    <testCase name="GridItem Component applies endRow correctly" duration="1"/>
    <testCase name="GridItem Component applies string endRow correctly" duration="1"/>
    <testCase name="GridItem Component applies alignItems correctly" duration="2"/>
    <testCase name="GridItem Component applies justifyContent correctly" duration="1"/>
    <testCase name="GridItem Component applies maxHeight correctly" duration="1"/>
    <testCase name="GridItem Component renders as different elements based on &quot;as&quot; prop" duration="2"/>
    <testCase name="GridItem Component applies automation-id for testing purposes" duration="1"/>
    <testCase name="GridItem Component forwards additional props to the element" duration="1"/>
    <testCase name="GridItem Component correctly processes colSpan over endColumn when both are provided" duration="2"/>
    <testCase name="GridItem Component correctly processes rowSpan over endRow when both are provided" duration="1"/>
    <testCase name="GridItem Component handles justifySelf prop correctly" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/data-table/__tests__/TableRows.test.tsx">
    <testCase name="TableRows Component should render without crashing" duration="5"/>
    <testCase name="TableRows Component should apply custom className and style" duration="2"/>
    <testCase name="TableRows Component should handle click events" duration="2"/>
    <testCase name="TableRows Component should call onSelectionChange when clicked" duration="2"/>
    <testCase name="TableRows Component should call onSelectionChange with correct state for already selected row" duration="1"/>
    <testCase name="TableRows Component should not call onClick or onSelectionChange if disabled" duration="2"/>
    <testCase name="TableRows Component should handle drag events" duration="7"/>
    <testCase name="TableRows Component should not handle drag events when disabled" duration="1"/>
    <testCase name="TableRows Component should apply selected styling when isSelected is true" duration="2"/>
    <testCase name="TableRows Component should apply disabled styling when isDisabled is true" duration="1"/>
    <testCase name="TableRows Component should pass correct context to column render functions" duration="3"/>
    <testCase name="TableRows Component should handle keyboard events for accessibility" duration="3"/>
    <testCase name="TableRows Component should not handle keyboard events when disabled" duration="1"/>
    <testCase name="TableRows Component should render with correct accessibility attributes" duration="1"/>
    <testCase name="TableRows Component should set tabIndex to -1 when disabled" duration="2"/>
    <testCase name="TableRows Component should handle edge case with missing onSelectionChange" duration="1"/>
    <testCase name="TableRows Component should handle collapsible content" duration="3"/>
    <testCase name="TableRows Component should prioritize collapsible content over selection when both are present" duration="2"/>
    <testCase name="TableRows Component should render collapsible content with correct test ID" duration="2"/>
    <testCase name="TableRows Component should handle different row heights" duration="54"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/data-table/__tests__/TableHeader.test.tsx">
    <testCase name="TableHeader renders all column headers" duration="7"/>
    <testCase name="TableHeader renders sort buttons for sortable columns only" duration="13"/>
    <testCase name="TableHeader calls onSort with correct key when sorting column is clicked" duration="3"/>
    <testCase name="TableHeader renders select all checkbox when enable is true" duration="3"/>
    <testCase name="TableHeader calls onSelectAll when checkbox is clicked" duration="8"/>
    <testCase name="TableHeader shows correct sort direction icon state" duration="3"/>
    <testCase name="TableHeader applies custom width to columns when specified" duration="5"/>
    <testCase name="TableHeader correctly handles select all checkbox state transitions" duration="4"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/dropdown/__tests__/DropdownItem.test.tsx">
    <testCase name="DropdownItem renders correctly with all props" duration="7"/>
    <testCase name="DropdownItem renders with auto-generated ID when not provided" duration="2"/>
    <testCase name="DropdownItem throws error when used outside DropdownContext" duration="54"/>
    <testCase name="DropdownItem calls onClick and closes dropdown when clicked" duration="3"/>
    <testCase name="DropdownItem should not close dropdown when clicked as submenu trigger" duration="3"/>
    <testCase name="DropdownItem calls onKeyDown when provided and key is pressed" duration="3"/>
    <testCase name="DropdownItem triggers click on Enter key when no onKeyDown provided" duration="3"/>
    <testCase name="DropdownItem triggers click on Space key when no onKeyDown provided" duration="3"/>
    <testCase name="DropdownItem does not trigger click when disabled" duration="2"/>
    <testCase name="DropdownItem sets data-state attribute when disabled" duration="8"/>
    <testCase name="DropdownItem sets tabIndex to -1 when disabled" duration="2"/>
    <testCase name="DropdownItem calls onMouseEnter when mouse enters" duration="3"/>
    <testCase name="DropdownItem calls onMouseLeave when mouse leaves" duration="3"/>
    <testCase name="DropdownItem uses default menuitem role when not specified" duration="3"/>
    <testCase name="DropdownItem uses custom role when specified" duration="3"/>
    <testCase name="DropdownItem forwards ref correctly" duration="1"/>
    <testCase name="DropdownItem renders children correctly" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/user/__tests__/UserContext.test.tsx">
    <testCase name="UserContext useUserContext provides user data to components" duration="4"/>
    <testCase name="UserContext useUserContext handles optional profilePic property" duration="2"/>
    <testCase name="UserContext useUserContext reflects isLoggedIn state" duration="1"/>
    <testCase name="UserContext useUserContext throws error when used outside of UserProvider" duration="94"/>
    <testCase name="UserContext UserContext can be updated with new values" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/section-alert/__tests__/SectionAlert.test.tsx">
    <testCase name="SectionAlert Component renders with basic props" duration="4"/>
    <testCase name="SectionAlert Component renders default header based on variant when hasHeader is true but no header is provided" duration="6"/>
    <testCase name="SectionAlert Component renders default header based on variant when hasHeader is true but no header is provided" duration="2"/>
    <testCase name="SectionAlert Component renders custom header when provided" duration="1"/>
    <testCase name="SectionAlert Component renders additional bold message when provided" duration="1"/>
    <testCase name="SectionAlert Component renders link without target attribute when linkCurrentTab is true" duration="2"/>
    <testCase name="SectionAlert Component renders link with _blank target when linkCurrentTab is false" duration="1"/>
    <testCase name="SectionAlert Component applies custom className" duration="2"/>
    <testCase name="SectionAlert Component passes automation-id to the root element" duration="2"/>
    <testCase name="SectionAlert Component displays the correct icon based on variant" duration="1"/>
    <testCase name="SectionAlert Component does not render link when link or linkText is not provided" duration="1"/>
    <testCase name="SectionAlert Component applies the correct variant class" duration="9"/>
    <testCase name="SectionAlert Component handles undefined variant by rendering empty icon" duration="1"/>
    <testCase name="SectionAlert Component renders global variant correctly" duration="1"/>
    <testCase name="SectionAlert Component renders message in layout1 when hasHeader is false" duration="1"/>
    <testCase name="SectionAlert Component renders message in layout2 when hasHeader is true" duration="2"/>
    <testCase name="SectionAlert Component uses empty string as headerText when hasHeader is false" duration="1"/>
    <testCase name="SectionAlert Component applies both additionalBoldMessage and header when both are provided" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/ai-components/beacon/__tests__/Beacon.test.tsx">
    <testCase name="Beacon renders with default thinking state" duration="5"/>
    <testCase name="Beacon renders idle state correctly" duration="2"/>
    <testCase name="Beacon renders processing state correctly" duration="2"/>
    <testCase name="Beacon renders generating state correctly" duration="2"/>
    <testCase name="Beacon shows progress bar when explicitly enabled" duration="2"/>
    <testCase name="Beacon does not show progress bar in idle state even when enabled" duration="2"/>
    <testCase name="Beacon animates dots in active states" duration="4"/>
    <testCase name="Beacon animates text transition when state changes" duration="3"/>
    <testCase name="Beacon applies drop shadow effect in active states but not in idle state" duration="2"/>
    <testCase name="Beacon stops dot animation when switching to idle state" duration="3"/>
    <testCase name="Beacon applies the active class with drop shadow in active states" duration="3"/>
    <testCase name="Beacon handles multiple rapid state changes gracefully" duration="3"/>
    <testCase name="Beacon respects custom messages" duration="2"/>
    <testCase name="Beacon calls onComplete when transitioning to idle state" duration="2"/>
    <testCase name="Beacon can disable all animations" duration="5"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/accordion/__tests__/Accordion.test.tsx">
    <testCase name="AccordionItem Component renders with required props" duration="10"/>
    <testCase name="AccordionItem Component renders with description" duration="2"/>
    <testCase name="AccordionItem Component applies correct data-state attribute based on open prop" duration="12"/>
    <testCase name="AccordionItem Component correctly applies custom heading level" duration="1"/>
    <testCase name="AccordionItem Component renders context menu when provided and enabled" duration="2"/>
    <testCase name="AccordionItem Component does not render context menu when provided but not enabled" duration="4"/>
    <testCase name="AccordionItem Component calls onHeadingClick when toggle is clicked" duration="6"/>
    <testCase name="AccordionItem Component calls onHeadingClick on Enter key press" duration="5"/>
    <testCase name="AccordionItem Component uses custom renderToggle function when provided" duration="2"/>
    <testCase name="AccordionItem Component handles transitionEnd event" duration="2"/>
    <testCase name="AccordionItem Component stops propagation when clicking context menu" duration="9"/>
    <testCase name="AccordionItem Component prevents default and stops propagation on Enter/Space in context menu" duration="2"/>
    <testCase name="AccordionItem Component respects controlled disabled prop over context" duration="4"/>
    <testCase name="AccordionItem Component sets correct aria attributes" duration="7"/>
    <testCase name="AccordionItem Component renders with a displayName" duration="0"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/drawer/__tests__/Drawer.test.tsx">
    <testCase name="Drawer Component Rendering should not render when closed" duration="4"/>
    <testCase name="Drawer Component Rendering should render when defaultOpen is true" duration="3"/>
    <testCase name="Drawer Component Rendering should render when controlled open prop is true" duration="2"/>
    <testCase name="Drawer Component Rendering should apply custom className" duration="2"/>
    <testCase name="Drawer Component Controlled Mode should open when open prop changes to true" duration="3"/>
    <testCase name="Drawer Component Controlled Mode should close when open prop changes to false" duration="3"/>
    <testCase name="Drawer Component Controlled Mode should call onOpenChange when close button is clicked" duration="3"/>
    <testCase name="Drawer Component Uncontrolled Mode should open by default when defaultOpen is true" duration="2"/>
    <testCase name="Drawer Component Uncontrolled Mode should close when close button is clicked" duration="4"/>
    <testCase name="Drawer Component Uncontrolled Mode should call onOpenChange when close button is clicked" duration="2"/>
    <testCase name="Drawer Component Ref API should expose open method through ref" duration="4"/>
    <testCase name="Drawer Component Ref API should expose close method through ref" duration="3"/>
    <testCase name="Drawer Component Ref API should expose toggle method through ref" duration="8"/>
    <testCase name="Drawer Component Ref API should expose isOpen method through ref" duration="3"/>
    <testCase name="Drawer Component Ref API should handle controlled state through ref methods" duration="2"/>
    <testCase name="Drawer Component Accessibility should have proper aria attributes" duration="1"/>
    <testCase name="Drawer Component Accessibility should have automation-id attribute for testing" duration="1"/>
    <testCase name="Drawer Component Animation should pass correct animation variants to motion components" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/input-fields/utils/__tests__/cc-utils.test.ts">
    <testCase name="Credit Card Type Detection Visa Detection should detect Visa for card number: 4111111111111111" duration="1"/>
    <testCase name="Credit Card Type Detection Visa Detection should detect Visa for card number: 4012888888881881" duration="0"/>
    <testCase name="Credit Card Type Detection Visa Detection should detect Visa for card number: 4222222222222" duration="0"/>
    <testCase name="Credit Card Type Detection Visa Detection should detect Visa for card number: 4 1111 1111 1111 1111" duration="0"/>
    <testCase name="Credit Card Type Detection Visa Detection should detect Visa for card number: 4-1111-1111-1111-1111" duration="0"/>
    <testCase name="Credit Card Type Detection Mastercard Detection should detect Mastercard for card number: 5500000000000004" duration="0"/>
    <testCase name="Credit Card Type Detection Mastercard Detection should detect Mastercard for card number: 5555555555554444" duration="0"/>
    <testCase name="Credit Card Type Detection Mastercard Detection should detect Mastercard for card number: 5105105105105100" duration="1"/>
    <testCase name="Credit Card Type Detection Mastercard Detection should detect Mastercard for card number: 51 0510 5105 1051 00" duration="0"/>
    <testCase name="Credit Card Type Detection Mastercard Detection should detect Mastercard for card number: 51-0510-5105-1051-00" duration="0"/>
    <testCase name="Credit Card Type Detection American Express Detection should detect Amex for card number: 340000000000009" duration="1"/>
    <testCase name="Credit Card Type Detection American Express Detection should detect Amex for card number: 378282246310005" duration="0"/>
    <testCase name="Credit Card Type Detection American Express Detection should detect Amex for card number: 371449635398431" duration="0"/>
    <testCase name="Credit Card Type Detection American Express Detection should detect Amex for card number: 34 0000 0000 0009" duration="0"/>
    <testCase name="Credit Card Type Detection American Express Detection should detect Amex for card number: 37-8282-2463-10005" duration="1"/>
    <testCase name="Credit Card Type Detection Discover Detection should detect Discover for card number: 6011111111111117" duration="0"/>
    <testCase name="Credit Card Type Detection Discover Detection should detect Discover for card number: 6011000990139424" duration="0"/>
    <testCase name="Credit Card Type Detection Discover Detection should detect Discover for card number: 6500000000000002" duration="0"/>
    <testCase name="Credit Card Type Detection Discover Detection should detect Discover for card number: 6011 1111 1111 1117" duration="1"/>
    <testCase name="Credit Card Type Detection Discover Detection should detect Discover for card number: 65-0000-0000-0002" duration="0"/>
    <testCase name="Credit Card Type Detection Edge Cases should return unknown for empty string" duration="0"/>
    <testCase name="Credit Card Type Detection Edge Cases should return unknown for null" duration="0"/>
    <testCase name="Credit Card Type Detection Edge Cases should return unknown for undefined" duration="0"/>
    <testCase name="Credit Card Type Detection Edge Cases should handle input with non-digit characters" duration="0"/>
    <testCase name="Credit Card Type Detection Edge Cases should return unknown for unrecognized card types" duration="0"/>
    <testCase name="Credit Card Type Detection Whitespace and Formatting Handling should ignore spaces in card numbers" duration="0"/>
    <testCase name="Credit Card Type Detection Whitespace and Formatting Handling should ignore dashes in card numbers" duration="0"/>
    <testCase name="Credit Card Type Detection Whitespace and Formatting Handling should handle mixed formatting" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/list/__tests__/ListItemActions.test.tsx">
    <testCase name="ListItemActions Component renders the default action buttons correctly" duration="8"/>
    <testCase name="ListItemActions Component calls onEdit with the correct item when edit button is clicked" duration="3"/>
    <testCase name="ListItemActions Component calls onDelete with the correct item when delete button is clicked" duration="2"/>
    <testCase name="ListItemActions Component renders beforeActions correctly" duration="3"/>
    <testCase name="ListItemActions Component renders afterActions correctly" duration="3"/>
    <testCase name="ListItemActions Component renders both beforeActions and afterActions correctly" duration="2"/>
    <testCase name="ListItemActions Component supports beforeActions as a function receiving the item" duration="4"/>
    <testCase name="ListItemActions Component supports afterActions as a function receiving the item" duration="2"/>
    <testCase name="ListItemActions Component hides edit button when hideEdit is true" duration="1"/>
    <testCase name="ListItemActions Component hides delete button when hideDelete is true" duration="2"/>
    <testCase name="ListItemActions Component hides both default buttons when both hide props are true" duration="1"/>
    <testCase name="ListItemActions Component renders custom children and ignores default actions" duration="1"/>
    <testCase name="ListItemActions Component supports custom children as ReactNode" duration="1"/>
    <testCase name="ListItemActions Component applies automation-id to the wrapper" duration="2"/>
    <testCase name="ListItemActions Component works without onEdit and onDelete when using custom children" duration="1"/>
    <testCase name="ListItemActions Component works correctly with different item types" duration="2"/>
    <testCase name="ListItemActions Component maintains accessibility with custom actions" duration="19"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/grid/__tests__/Grid.test.tsx">
    <testCase name="Grid Component renders children correctly" duration="4"/>
    <testCase name="Grid Component applies custom className when provided" duration="1"/>
    <testCase name="Grid Component renders with default gap value" duration="7"/>
    <testCase name="Grid Component renders with custom gap value" duration="2"/>
    <testCase name="Grid Component renders with default display value" duration="1"/>
    <testCase name="Grid Component renders with inline-grid display value" duration="2"/>
    <testCase name="Grid Component applies numeric columns correctly" duration="1"/>
    <testCase name="Grid Component applies string columns correctly" duration="1"/>
    <testCase name="Grid Component applies numeric rows correctly" duration="2"/>
    <testCase name="Grid Component applies string rows correctly" duration="1"/>
    <testCase name="Grid Component applies gridAutoColumns correctly" duration="2"/>
    <testCase name="Grid Component applies gridAutoRows correctly" duration="1"/>
    <testCase name="Grid Component renders with default gridAutoFlow value" duration="2"/>
    <testCase name="Grid Component applies custom gridAutoFlow correctly" duration="1"/>
    <testCase name="Grid Component passes containerName prop correctly" duration="2"/>
    <testCase name="Grid Component passes containerType prop correctly" duration="0"/>
    <testCase name="Grid Component applies automation-id for testing purposes" duration="1"/>
    <testCase name="Grid Component forwards additional props to the div element" duration="1"/>
    <testCase name="Grid Component uses ref correctly" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/divider/__tests__/Divider.test.tsx">
    <testCase name="Divider Component Basic Rendering renders without crashing" duration="5"/>
    <testCase name="Divider Component Basic Rendering renders as a div element with separator role" duration="2"/>
    <testCase name="Divider Component Basic Rendering has correct display name" duration="0"/>
    <testCase name="Divider Component Default Props applies default thickness (medium) and orientation (horizontal)" duration="2"/>
    <testCase name="Divider Component Thickness Variants applies thin thickness class" duration="3"/>
    <testCase name="Divider Component Thickness Variants applies medium thickness class" duration="5"/>
    <testCase name="Divider Component Thickness Variants applies thick thickness class" duration="3"/>
    <testCase name="Divider Component Orientation Variants applies horizontal orientation class" duration="2"/>
    <testCase name="Divider Component Orientation Variants applies vertical orientation class" duration="2"/>
    <testCase name="Divider Component Combined Props applies multiple variant classes together" duration="3"/>
    <testCase name="Divider Component Combined Props applies all classes including custom className" duration="3"/>
    <testCase name="Divider Component Custom Props applies custom className" duration="2"/>
    <testCase name="Divider Component Custom Props applies automation-id attribute" duration="2"/>
    <testCase name="Divider Component Custom Props passes through additional HTML attributes" duration="3"/>
    <testCase name="Divider Component Edge Cases handles undefined className gracefully" duration="2"/>
    <testCase name="Divider Component Edge Cases handles empty string className" duration="2"/>
    <testCase name="Divider Component Edge Cases handles multiple space-separated classNames" duration="3"/>
    <testCase name="Divider Component Accessibility has proper ARIA role" duration="2"/>
    <testCase name="Divider Component Accessibility can be found by role and accessible name when aria-label is provided" duration="3"/>
    <testCase name="Divider Component Accessibility supports aria-orientation attribute" duration="4"/>
    <testCase name="Divider Component TypeScript Props accepts all valid thickness values" duration="6"/>
    <testCase name="Divider Component TypeScript Props accepts all valid orientation values" duration="4"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/validation-message/__tests__/ValidationMessage.test.tsx">
    <testCase name="ValidationMessage does not render when no validation props are provided" duration="4"/>
    <testCase name="ValidationMessage renders error message when invalid and invalidText are provided" duration="8"/>
    <testCase name="ValidationMessage does not render when invalid is true but invalidText is not provided" duration="1"/>
    <testCase name="ValidationMessage renders warning message when warn and warnText are provided" duration="2"/>
    <testCase name="ValidationMessage does not render when warn is true but warnText is not provided" duration="2"/>
    <testCase name="ValidationMessage renders both error and warning messages when all flags are true" duration="3"/>
    <testCase name="ValidationMessage does not render error message when readOnly is true" duration="2"/>
    <testCase name="ValidationMessage still renders warning message when readOnly is true" duration="2"/>
    <testCase name="ValidationMessage handles FieldError objects for invalidText" duration="2"/>
    <testCase name="ValidationMessage handles FieldError objects for warnText" duration="1"/>
    <testCase name="ValidationMessage handles nested FieldErrors objects" duration="2"/>
    <testCase name="ValidationMessage does not render when success is true but successText is not provided" duration="1"/>
    <testCase name="ValidationMessage handles React nodes as error messages" duration="8"/>
    <testCase name="ValidationMessage handles React nodes as warning messages" duration="1"/>
    <testCase name="ValidationMessage sets the automation-id attribute correctly" duration="10"/>
    <testCase name="ValidationMessage allows custom automation-id to be provided" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/workflow-modal/__tests__/WorkflowModal.test.tsx">
    <testCase name="WorkflowModal renders correctly when open" duration="6"/>
    <testCase name="WorkflowModal does not render when closed" duration="2"/>
    <testCase name="WorkflowModal calls onClose when close button is clicked" duration="21"/>
    <testCase name="WorkflowModal calls onClose when Escape key is pressed" duration="3"/>
    <testCase name="WorkflowModal does not call onClose for other keys" duration="1"/>
    <testCase name="WorkflowModal renders with a custom id when provided" duration="2"/>
    <testCase name="WorkflowModal renders footer when provided" duration="3"/>
    <testCase name="WorkflowModal removes event listener on unmount" duration="2"/>
    <testCase name="WorkflowModal handles animation states correctly" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/ai-components/prompt-input/__tests__/PromptInput.test.tsx">
    <testCase name="PromptInput renders with default props" duration="6"/>
    <testCase name="PromptInput renders with custom placeholder and aria-label" duration="2"/>
    <testCase name="PromptInput calls onChange when typing" duration="3"/>
    <testCase name="PromptInput calls onSubmit when Enter is pressed without Shift" duration="2"/>
    <testCase name="PromptInput does not call onSubmit when Shift+Enter is pressed" duration="5"/>
    <testCase name="PromptInput renders leftSlot, rightSlot, bottomSlot, and iconSlot" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/panel/__tests__/Panel.test.tsx">
    <testCase name="Panel renders children" duration="4"/>
    <testCase name="Panel renders header when provided" duration="3"/>
    <testCase name="Panel renders header icon when provided" duration="3"/>
    <testCase name="Panel renders action button when provided" duration="11"/>
    <testCase name="Panel renders footer when provided" duration="2"/>
    <testCase name="Panel renders footer divider when footerDivider is true" duration="1"/>
    <testCase name="Panel applies no border style when specified" duration="1"/>
    <testCase name="Panel renders section alert when provided" duration="2"/>
    <testCase name="Panel does not render header when no header props are provided" duration="1"/>
    <testCase name="Panel does not render footer when not provided" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/tabs/__tests__/Tabs.test.tsx">
    <testCase name="Tabs Component renders all tab labels" duration="8"/>
    <testCase name="Tabs Component displays the content of the first tab by default" duration="6"/>
    <testCase name="Tabs Component changes content when a different tab is clicked" duration="5"/>
    <testCase name="Tabs Component applies active class to the active tab" duration="3"/>
    <testCase name="Tabs Component renders scroll arrows when content is overflowing" duration="5"/>
    <testCase name="Tabs Component scrolls tabs when arrow buttons are clicked (when overflowing)" duration="5"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/list/__tests__/ListItemForm.test.tsx">
    <testCase name="ListItemForm Component renders the form with inputs and buttons correctly" duration="6"/>
    <testCase name="ListItemForm Component applies custom button labels" duration="2"/>
    <testCase name="ListItemForm Component updates internal state when inputs change" duration="4"/>
    <testCase name="ListItemForm Component calls onSave with the updated item when Save is clicked" duration="4"/>
    <testCase name="ListItemForm Component calls onCancel when Cancel is clicked" duration="2"/>
    <testCase name="ListItemForm Component resets form to initial values when Reset is clicked" duration="5"/>
    <testCase name="ListItemForm Component shows validation errors and prevents saving when validation fails" duration="4"/>
    <testCase name="ListItemForm Component clears validation errors when input changes" duration="4"/>
    <testCase name="ListItemForm Component resets the form when item prop changes" duration="4"/>
    <testCase name="ListItemForm Component prevents default form submission and calls handleSave" duration="2"/>
    <testCase name="ListItemForm Component applies automation-id to the form" duration="4"/>
    <testCase name="ListItemForm Component uses default automation-id when not provided" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/currency-input/__tests__/CurrencyInput.test.tsx">
    <testCase name="CurrencyInput Utility Functions formatStringAsCurrency formats empty values correctly" duration="1"/>
    <testCase name="CurrencyInput Utility Functions formatStringAsCurrency adds dollar sign when showDollarSign is true" duration="0"/>
    <testCase name="CurrencyInput Utility Functions formatStringAsCurrency formats numbers with commas for thousands" duration="1"/>
    <testCase name="CurrencyInput Utility Functions formatStringAsCurrency handles number input types correctly" duration="0"/>
    <testCase name="CurrencyInput Utility Functions formatStringAsCurrency ensures two decimal places" duration="1"/>
    <testCase name="CurrencyInput Utility Functions formatStringAsCurrency handles special values correctly" duration="4"/>
    <testCase name="CurrencyInput Utility Functions formatValueAsBigDecimal returns null for empty inputs" duration="0"/>
    <testCase name="CurrencyInput Utility Functions formatValueAsBigDecimal returns null for non-numeric inputs" duration="1"/>
    <testCase name="CurrencyInput Utility Functions formatValueAsBigDecimal parses numeric values correctly" duration="0"/>
    <testCase name="CurrencyInput Utility Functions formatValueAsBigDecimal removes currency symbols for parsing" duration="0"/>
    <testCase name="CurrencyInput Utility Functions formatValueAsBigDecimal removes commas for parsing" duration="1"/>
    <testCase name="CurrencyInput Utility Functions formatValueAsBigDecimal maintains precision of decimal values" duration="0"/>
    <testCase name="CurrencyInput Utility Functions onlyNumbersAndDot filters out non-numeric characters" duration="1"/>
    <testCase name="CurrencyInput Utility Functions onlyNumbersAndDot maintains a single decimal point" duration="0"/>
    <testCase name="CurrencyInput Utility Functions onlyNumbersAndDot permits NA if allowNa is true" duration="1"/>
    <testCase name="CurrencyInput Utility Functions onlyNumbersAndDot permits N/A if acceptNaWithSlashFormat is true" duration="0"/>
    <testCase name="CurrencyInput Utility Functions onlyNumbersAndDot handles negative sign" duration="0"/>
    <testCase name="CurrencyInput Utility Functions onlyNumbersAndDot prevents adding multiple negative signs" duration="0"/>
    <testCase name="CurrencyInput Utility Functions onlyNumbersAndDot returns old value if no valid characters in new value" duration="1"/>
    <testCase name="CurrencyInput Utility Functions numberInputProps handles shared number input props correctly" duration="0"/>
    <testCase name="CurrencyInput Utility Functions numberInputProps omits aria-describedby if no invalidId provided" duration="1"/>
    <testCase name="CurrencyInput Utility Functions numberInputProps omits invalid attributes if invalid is false" duration="0"/>
    <testCase name="CurrencyInput Utility Functions useRunAfterUpdate hook executes the callback after state update" duration="10"/>
    <testCase name="CurrencyInput Utility Functions useRunAfterUpdate hook cleans up if component unmounts before callback runs" duration="10"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/data-table/__tests__/TablePagination.test.tsx">
    <testCase name="TableCheckbox Rendering renders with correct default props" duration="6"/>
    <testCase name="TableCheckbox Rendering renders as checked when checked prop is true" duration="2"/>
    <testCase name="TableCheckbox Rendering renders as disabled when disabled prop is true" duration="1"/>
    <testCase name="TableCheckbox Rendering renders as indeterminate when indeterminate prop is true" duration="1"/>
    <testCase name="TableCheckbox Rendering renders with correct aria-label" duration="1"/>
    <testCase name="TableCheckbox Selection Behavior calls onSelectionChange with correct parameters when clicked" duration="2"/>
    <testCase name="TableCheckbox Selection Behavior calls onSelectionChange with false when checked box is clicked" duration="1"/>
    <testCase name="TableCheckbox Selection Behavior passes correct context with source" duration="1"/>
    <testCase name="TableCheckbox Selection Behavior does not call onSelectionChange when disabled" duration="1"/>
    <testCase name="TableCheckbox Event Handling stops event propagation when clicked" duration="1"/>
    <testCase name="TableCheckbox Event Handling handles multiple rapid clicks correctly" duration="8"/>
    <testCase name="TableCheckbox Generic Type Support works with different row data types" duration="1"/>
    <testCase name="TableCheckbox Generic Type Support maintains type safety with generic constraints" duration="2"/>
    <testCase name="TableCheckbox Edge Cases handles empty rowId" duration="1"/>
    <testCase name="TableCheckbox Edge Cases handles special characters in rowId" duration="2"/>
    <testCase name="TableCheckbox Edge Cases handles numeric rowId" duration="1"/>
    <testCase name="TableCheckbox Edge Cases maintains indeterminate state during interactions" duration="2"/>
    <testCase name="TableCheckbox Accessibility has proper accessibility attributes" duration="1"/>
    <testCase name="TableCheckbox Accessibility maintains accessibility when disabled" duration="1"/>
    <testCase name="TableCheckbox Accessibility supports keyboard interaction" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useFocusTrap.test.ts">
    <testCase name="useFocusTrap Hook should identify focusable elements within the root element" duration="9"/>
    <testCase name="useFocusTrap Hook should not set focus when isActive is false" duration="2"/>
    <testCase name="useFocusTrap Hook should focus the first element when isActive becomes true" duration="3"/>
    <testCase name="useFocusTrap Hook should focus the initialFocusElement when provided" duration="2"/>
    <testCase name="useFocusTrap Hook should restore previous focus when trap becomes inactive" duration="2"/>
    <testCase name="useFocusTrap Hook should handle Tab key navigation" duration="2"/>
    <testCase name="useFocusTrap Hook should handle Shift+Tab key navigation" duration="2"/>
    <testCase name="useFocusTrap Hook should handle arrow key navigation" duration="3"/>
    <testCase name="useFocusTrap Hook should wrap focus from last to first element" duration="2"/>
    <testCase name="useFocusTrap Hook should wrap focus from first to last element with Shift+Tab" duration="2"/>
    <testCase name="useFocusTrap Hook should clean up event listeners when unmounted" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/breadcrumb/__tests__/Breadcrumb.test.tsx">
    <testCase name="Breadcrumb renders breadcrumb items correctly" duration="25"/>
    <testCase name="Breadcrumb applies current class to the last breadcrumb item" duration="2"/>
    <testCase name="Breadcrumb renders only the home breadcrumb when on the home page" duration="1"/>
    <testCase name="Breadcrumb renders correctly with custom className" duration="4"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/icon/__tests__/SvgIcons.test.tsx">
    <testCase name="AIStars Icon renders without crashing" duration="3"/>
    <testCase name="AIStars Icon passes className prop correctly" duration="1"/>
    <testCase name="AIStars Icon passes other props correctly" duration="1"/>
    <testCase name="AIStars Icon has correct viewBox" duration="1"/>
    <testCase name="AIStars Icon contains at least one path or shape element" duration="1"/>
    <testCase name="ChatPin Icon renders without crashing" duration="1"/>
    <testCase name="ChatPin Icon passes className prop correctly" duration="1"/>
    <testCase name="ChatPin Icon passes other props correctly" duration="1"/>
    <testCase name="ChatPin Icon has correct viewBox" duration="1"/>
    <testCase name="ChatPin Icon contains at least one path or shape element" duration="1"/>
    <testCase name="ChatPinFilled Icon renders without crashing" duration="1"/>
    <testCase name="ChatPinFilled Icon passes className prop correctly" duration="1"/>
    <testCase name="ChatPinFilled Icon passes other props correctly" duration="1"/>
    <testCase name="ChatPinFilled Icon has correct viewBox" duration="1"/>
    <testCase name="ChatPinFilled Icon contains at least one path or shape element" duration="1"/>
    <testCase name="CheckCircleIcon Icon renders without crashing" duration="4"/>
    <testCase name="CheckCircleIcon Icon passes className prop correctly" duration="0"/>
    <testCase name="CheckCircleIcon Icon passes other props correctly" duration="1"/>
    <testCase name="CheckCircleIcon Icon has correct viewBox" duration="1"/>
    <testCase name="CheckCircleIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="AlertIcon Icon renders without crashing" duration="1"/>
    <testCase name="AlertIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="AlertIcon Icon passes other props correctly" duration="1"/>
    <testCase name="AlertIcon Icon has correct viewBox" duration="1"/>
    <testCase name="AlertIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="AlertCircleIcon Icon renders without crashing" duration="1"/>
    <testCase name="AlertCircleIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="AlertCircleIcon Icon passes other props correctly" duration="0"/>
    <testCase name="AlertCircleIcon Icon has correct viewBox" duration="1"/>
    <testCase name="AlertCircleIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="CloseCircleIcon Icon renders without crashing" duration="1"/>
    <testCase name="CloseCircleIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="CloseCircleIcon Icon passes other props correctly" duration="0"/>
    <testCase name="CloseCircleIcon Icon has correct viewBox" duration="1"/>
    <testCase name="CloseCircleIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="CheckIcon Icon renders without crashing" duration="1"/>
    <testCase name="CheckIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="CheckIcon Icon passes other props correctly" duration="0"/>
    <testCase name="CheckIcon Icon has correct viewBox" duration="1"/>
    <testCase name="CheckIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="CloseIcon Icon renders without crashing" duration="1"/>
    <testCase name="CloseIcon Icon passes className prop correctly" duration="0"/>
    <testCase name="CloseIcon Icon passes other props correctly" duration="0"/>
    <testCase name="CloseIcon Icon has correct viewBox" duration="1"/>
    <testCase name="CloseIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="EmptyInboxIcon Icon renders without crashing" duration="1"/>
    <testCase name="EmptyInboxIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="EmptyInboxIcon Icon passes other props correctly" duration="1"/>
    <testCase name="EmptyInboxIcon Icon has correct viewBox" duration="1"/>
    <testCase name="EmptyInboxIcon Icon contains at least one path or shape element" duration="4"/>
    <testCase name="ErrorIcon Icon renders without crashing" duration="2"/>
    <testCase name="ErrorIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="ErrorIcon Icon passes other props correctly" duration="1"/>
    <testCase name="ErrorIcon Icon has correct viewBox" duration="2"/>
    <testCase name="ErrorIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="NoSearchResultIcon Icon renders without crashing" duration="2"/>
    <testCase name="NoSearchResultIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="NoSearchResultIcon Icon passes other props correctly" duration="2"/>
    <testCase name="NoSearchResultIcon Icon has correct viewBox" duration="1"/>
    <testCase name="NoSearchResultIcon Icon contains at least one path or shape element" duration="1"/>
    <testCase name="SearchIcon Icon renders without crashing" duration="0"/>
    <testCase name="SearchIcon Icon passes className prop correctly" duration="1"/>
    <testCase name="SearchIcon Icon passes other props correctly" duration="1"/>
    <testCase name="SearchIcon Icon has correct viewBox" duration="1"/>
    <testCase name="SearchIcon Icon contains at least one path or shape element" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/dialog/__tests__/Dialog.test.tsx">
    <testCase name="Dialog Component renders nothing when open is false" duration="3"/>
    <testCase name="Dialog Component renders content when open is true" duration="2"/>
    <testCase name="Dialog Component applies the correct width classes based on width prop" duration="7"/>
    <testCase name="Dialog Component calls onClose when Escape key is pressed" duration="2"/>
    <testCase name="Dialog Component applies custom className when provided" duration="3"/>
    <testCase name="Dialog Component sets correct ARIA attributes for accessibility" duration="7"/>
    <testCase name="Dialog Component applies automation-id when provided" duration="3"/>
    <testCase name="Dialog Component handles tab key navigation correctly" duration="6"/>
    <testCase name="Dialog Component removes keydown event listener when unmounted" duration="2"/>
    <testCase name="Dialog Component adds keydown event listener when mounted and open" duration="1"/>
    <testCase name="Dialog Component attempts to focus the first focusable element when opened" duration="1"/>
    <testCase name="Dialog Component does not call onClose for other key presses" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/empty-state/__tests__/EmptyState.test.tsx">
    <testCase name="EmptyState Component renders with required props" duration="14"/>
    <testCase name="EmptyState Component applies custom className" duration="4"/>
    <testCase name="EmptyState Component renders without description when not provided" duration="2"/>
    <testCase name="EmptyState Component applies automation-id" duration="4"/>
    <testCase name="EmptyState Component renders children in the correct section" duration="9"/>
    <testCase name="EmptyState Component renders title as h3" duration="7"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/navbar/__tests__/Navbar.test.tsx">
    <testCase name="Navbar Component renders with default props" duration="10"/>
    <testCase name="Navbar Component renders with custom logo component" duration="2"/>
    <testCase name="Navbar Component renders with custom link components" duration="1"/>
    <testCase name="Navbar Component renders children when username is provided" duration="1"/>
    <testCase name="Navbar Component does not render children when username is not provided" duration="2"/>
    <testCase name="Navbar Component uses div as wrapper component when specified" duration="2"/>
    <testCase name="Navbar Component uses header as default wrapper component" duration="2"/>
    <testCase name="Navbar Component passes automation-id to the nav element" duration="12"/>
    <testCase name="Navbar Component applies custom id when provided" duration="3"/>
    <testCase name="Navbar Component does not render logo section when logoSrc and logo are not provided" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/progress-bar/__tests__/ProgressBar.test.tsx">
    <testCase name="ProgressBar Component renders with basic props" duration="8"/>
    <testCase name="ProgressBar Component applies custom className" duration="3"/>
    <testCase name="ProgressBar Component sets aria-label when id is provided" duration="3"/>
    <testCase name="ProgressBar Component shows progress text when showProgress is true" duration="2"/>
    <testCase name="ProgressBar Component does not show progress text when showProgress is false" duration="1"/>
    <testCase name="ProgressBar Component animates progress text" duration="2"/>
    <testCase name="ProgressBar Component applies stopAnimation class when stopAnimation is true" duration="3"/>
    <testCase name="ProgressBar Component applies base class when value is less than 100" duration="3"/>
    <testCase name="ProgressBar Component applies automation-id when provided" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/list/__tests__/ListItem.test.tsx">
    <testCase name="ListItem Component renders children correctly" duration="3"/>
    <testCase name="ListItem Component applies custom className" duration="1"/>
    <testCase name="ListItem Component uses provided id" duration="1"/>
    <testCase name="ListItem Component generates an id when not provided" duration="2"/>
    <testCase name="ListItem Component applies automation-id attribute" duration="1"/>
    <testCase name="ListItem Component forwards ref to the li element" duration="1"/>
    <testCase name="ListItem Component Draggable functionality applies draggable attribute when isDraggable is true" duration="1"/>
    <testCase name="ListItem Component Draggable functionality is not draggable by default" duration="2"/>
    <testCase name="ListItem Component Draggable functionality handles drag start correctly" duration="3"/>
    <testCase name="ListItem Component Draggable functionality handles drag over correctly" duration="1"/>
    <testCase name="ListItem Component Draggable functionality handles drop correctly with onReorder callback" duration="3"/>
    <testCase name="ListItem Component Draggable functionality handles drop correctly without onReorder callback" duration="4"/>
    <testCase name="ListItem Component Draggable functionality does not call onReorder when dropping on self" duration="4"/>
    <testCase name="ListItem Component Draggable functionality handles drag end correctly" duration="2"/>
    <testCase name="ListItem Component Non-draggable items receiving drag events ignores drag start on non-draggable items" duration="1"/>
    <testCase name="ListItem Component Non-draggable items receiving drag events ignores drag over on non-draggable items" duration="1"/>
    <testCase name="ListItem Component Non-draggable items receiving drag events ignores drop on non-draggable items" duration="2"/>
    <testCase name="ListItem Component Non-draggable items receiving drag events ignores drag end on non-draggable items" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/usePagination.test.tsx">
    <testCase name="usePagination Hook Client-side pagination initializes with correct default values" duration="3"/>
    <testCase name="usePagination Hook Client-side pagination handles page changes correctly" duration="1"/>
    <testCase name="usePagination Hook Client-side pagination handles page size changes correctly" duration="2"/>
    <testCase name="usePagination Hook Client-side pagination handles last page with partial data correctly" duration="1"/>
    <testCase name="usePagination Hook Server-side pagination initializes with server-side configuration" duration="1"/>
    <testCase name="usePagination Hook Server-side pagination calls server pagination handler on page change" duration="1"/>
    <testCase name="usePagination Hook Server-side pagination calls server pagination handler on page size change" duration="1"/>
    <testCase name="usePagination Hook Edge cases handles invalid page numbers by using minimum valid page" duration="1"/>
    <testCase name="usePagination Hook Edge cases handles page numbers beyond total pages" duration="1"/>
    <testCase name="usePagination Hook Edge cases handles zero or negative page size by using minimum size of 1" duration="1"/>
    <testCase name="usePagination Hook Edge cases handles empty data set" duration="1"/>
    <testCase name="usePagination Hook Edge cases handles page size larger than data set" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/loader/__tests__/Loader.test.tsx">
    <testCase name="Loader Component renders with default props but hides description" duration="7"/>
    <testCase name="Loader Component renders description when showDescription is true" duration="1"/>
    <testCase name="Loader Component renders with custom description when showDescription is true" duration="3"/>
    <testCase name="Loader Component applies custom className" duration="4"/>
    <testCase name="Loader Component renders with overlay when withOverlay is true" duration="6"/>
    <testCase name="Loader Component does not render with overlay when withOverlay is false" duration="3"/>
    <testCase name="Loader Component applies automation-id when provided" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/flex/__tests__/Flex.test.tsx">
    <testCase name="Flex Component renders children correctly" duration="4"/>
    <testCase name="Flex Component applies default prop values correctly" duration="3"/>
    <testCase name="Flex Component applies custom display value correctly" duration="2"/>
    <testCase name="Flex Component applies custom gap value correctly" duration="2"/>
    <testCase name="Flex Component applies alignment props correctly" duration="1"/>
    <testCase name="Flex Component applies flex direction and wrap props correctly" duration="1"/>
    <testCase name="Flex Component applies flex child props correctly" duration="2"/>
    <testCase name="Flex Component applies minHeight prop correctly" duration="2"/>
    <testCase name="Flex Component applies custom className correctly" duration="1"/>
    <testCase name="Flex Component applies automation-id correctly" duration="2"/>
    <testCase name="Flex Component forwards additional props to div element" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/footer/__tests__/Footer.test.tsx">
    <testCase name="Footer Component renders footer with correct content" duration="6"/>
    <testCase name="Footer Component renders all provided links" duration="3"/>
    <testCase name="Footer Component renders social media links" duration="2"/>
    <testCase name="Footer Component applies custom background color and border" duration="8"/>
    <testCase name="Footer Component passes through additional props" duration="2"/>
    <testCase name="Footer Component renders the current year in the copyright notice" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/icon/__tests__/Icon.test.tsx">
    <testCase name="Icon Component renders with default props" duration="4"/>
    <testCase name="Icon Component renders with small size" duration="1"/>
    <testCase name="Icon Component renders with large size" duration="1"/>
    <testCase name="Icon Component renders with primary color" duration="1"/>
    <testCase name="Icon Component renders with secondary color" duration="1"/>
    <testCase name="Icon Component renders with tertiary color" duration="1"/>
    <testCase name="Icon Component renders with accent color" duration="4"/>
    <testCase name="Icon Component renders with disabled color" duration="0"/>
    <testCase name="Icon Component renders with info color" duration="0"/>
    <testCase name="Icon Component renders with success color" duration="1"/>
    <testCase name="Icon Component renders with warning color" duration="1"/>
    <testCase name="Icon Component renders with error color" duration="1"/>
    <testCase name="Icon Component applies custom className" duration="1"/>
    <testCase name="Icon Component applies custom automation-id" duration="1"/>
    <testCase name="Icon Component passes additional props to svg element" duration="1"/>
    <testCase name="Icon Component applies ref to svg element" duration="1"/>
    <testCase name="Icon Component supports different icon names" duration="1"/>
    <testCase name="Icon Component supports mdi-alert icon name" duration="1"/>
    <testCase name="Icon Component supports mdi-information icon name" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/utilities/__tests__/navigation.test.ts">
    <testCase name="a11y utility functions getNextIndex should increment index when ArrowRight is pressed" duration="1"/>
    <testCase name="a11y utility functions getNextIndex should wrap around to the beginning when ArrowRight is pressed on the last index" duration="0"/>
    <testCase name="a11y utility functions getNextIndex should decrement index when ArrowLeft is pressed" duration="1"/>
    <testCase name="a11y utility functions getNextIndex should wrap around to the end when ArrowLeft is pressed on the first index" duration="0"/>
    <testCase name="a11y utility functions getNextIndex should work with single item arrays" duration="1"/>
    <testCase name="a11y utility functions getNextIndex should return undefined for keys other than ArrowLeft and ArrowRight" duration="0"/>
    <testCase name="a11y utility functions getNextIndex should handle array index at boundaries correctly" duration="0"/>
    <testCase name="a11y utility functions DOCUMENT_POSITION constants should define DOCUMENT_POSITION_BROAD_PRECEDING correctly" duration="0"/>
    <testCase name="a11y utility functions DOCUMENT_POSITION constants should define DOCUMENT_POSITION_BROAD_FOLLOWING correctly" duration="0"/>
    <testCase name="a11y utility functions CSS selectors should define selectorTabbable as a non-empty string" duration="1"/>
    <testCase name="a11y utility functions CSS selectors should define selectorFocusable as a non-empty string" duration="0"/>
    <testCase name="a11y utility functions CSS selectors should include common focusable elements in selectorFocusable" duration="0"/>
    <testCase name="a11y utility functions CSS selectors should include common tabbable elements in selectorTabbable with tabindex check" duration="1"/>
    <testCase name="a11y utility functions CSS selectors should have different criteria for tabbable vs focusable elements" duration="0"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/tabs-v2/__tests__/TabsV2.test.tsx">
    <testCase name="TabsV2 Component renders all tab labels" duration="15"/>
    <testCase name="TabsV2 Component applies active class to the active tab" duration="3"/>
    <testCase name="TabsV2 Component calls onTabChange when a different tab is clicked" duration="3"/>
    <testCase name="TabsV2 Component scrolls tabs when arrow buttons are clicked (when overflowing)" duration="6"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/input-fields/utils/__tests__/date-utils.test.ts">
    <testCase name="Date Utilities formatDate should format date in MM/DD/YYYY by default" duration="0"/>
    <testCase name="Date Utilities formatDate should format date in DD/MM/YYYY" duration="0"/>
    <testCase name="Date Utilities formatDate should format date in YYYY-MM-DD" duration="0"/>
    <testCase name="Date Utilities formatDate should handle different dates" duration="0"/>
    <testCase name="Date Utilities isValidDate should validate dates in MM/DD/YYYY format" duration="1"/>
    <testCase name="Date Utilities isValidDate should validate dates in DD/MM/YYYY format" duration="0"/>
    <testCase name="Date Utilities isValidDate should validate dates in YYYY-MM-DD format" duration="1"/>
    <testCase name="Date Utilities isValidDate should handle invalid dates" duration="0"/>
    <testCase name="Date Utilities isValidDate should handle edge cases" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/data-table/__tests__/TableCheckbox.test.tsx">
    <testCase name="TableCheckbox Rendering renders with correct default props" duration="3"/>
    <testCase name="TableCheckbox Rendering renders as checked when checked prop is true" duration="1"/>
    <testCase name="TableCheckbox Rendering renders as disabled when disabled prop is true" duration="1"/>
    <testCase name="TableCheckbox Rendering renders as indeterminate when indeterminate prop is true" duration="1"/>
    <testCase name="TableCheckbox Rendering renders with correct aria-label" duration="1"/>
    <testCase name="TableCheckbox Selection Behavior calls onSelectionChange with correct parameters when clicked" duration="2"/>
    <testCase name="TableCheckbox Selection Behavior calls onSelectionChange with false when checked box is clicked" duration="1"/>
    <testCase name="TableCheckbox Selection Behavior passes correct context with source" duration="1"/>
    <testCase name="TableCheckbox Selection Behavior does not call onSelectionChange when disabled" duration="1"/>
    <testCase name="TableCheckbox Event Handling stops event propagation when clicked" duration="2"/>
    <testCase name="TableCheckbox Event Handling handles multiple rapid clicks correctly" duration="4"/>
    <testCase name="TableCheckbox Generic Type Support works with different row data types" duration="1"/>
    <testCase name="TableCheckbox Generic Type Support maintains type safety with generic constraints" duration="2"/>
    <testCase name="TableCheckbox Edge Cases handles empty rowId" duration="1"/>
    <testCase name="TableCheckbox Edge Cases handles special characters in rowId" duration="2"/>
    <testCase name="TableCheckbox Edge Cases handles numeric rowId" duration="1"/>
    <testCase name="TableCheckbox Edge Cases maintains indeterminate state during interactions" duration="1"/>
    <testCase name="TableCheckbox Accessibility has proper accessibility attributes" duration="0"/>
    <testCase name="TableCheckbox Accessibility maintains accessibility when disabled" duration="0"/>
    <testCase name="TableCheckbox Accessibility supports keyboard interaction" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/label/__tests__/Label.test.tsx">
    <testCase name="Label Component renders with children" duration="4"/>
    <testCase name="Label Component applies custom className" duration="2"/>
    <testCase name="Label Component does not render Box when hasIcon is true" duration="1"/>
    <testCase name="Label Component renders Box when hasIcon is false" duration="1"/>
    <testCase name="Label Component passes through additional props to label element" duration="1"/>
    <testCase name="Label Component applies automation-id when provided" duration="1"/>
    <testCase name="Label Component renders with correct display flex" duration="10"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/button/__tests__/Button.test.tsx">
    <testCase name="Button should render" duration="7"/>
    <testCase name="Button should only propagate click events from the input" duration="15"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useMeasure.test.tsx">
    <testCase name="useMeasure hook updates height when content expands" duration="4"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/card/Card.test.tsx">
    <testCase name="Card Component Main Card renders children correctly" duration="3"/>
    <testCase name="Card Component Main Card applies default variant class" duration="1"/>
    <testCase name="Card Component Main Card applies bordered variant class when specified" duration="0"/>
    <testCase name="Card Component Main Card shows loading overlay when isLoading is true" duration="1"/>
    <testCase name="Card Component Main Card applies loading classes when isLoading is true" duration="1"/>
    <testCase name="Card Component Main Card applies custom className" duration="1"/>
    <testCase name="Card Component Card.Title renders title text correctly" duration="2"/>
    <testCase name="Card Component Card.Title applies cardTitle class" duration="1"/>
    <testCase name="Card Component Card.Title applies custom className to title" duration="1"/>
    <testCase name="Card Component Card.Content renders content correctly" duration="1"/>
    <testCase name="Card Component Card.Content applies cardContent class" duration="1"/>
    <testCase name="Card Component Card.Content shows fallback loader during suspense" duration="3"/>
    <testCase name="Card Component Card.Content applies custom className to content" duration="1"/>
    <testCase name="Card Component Card.Footer renders footer content correctly" duration="1"/>
    <testCase name="Card Component Card.Footer applies alignment classes correctly" duration="2"/>
    <testCase name="Card Component Card.Footer applies custom className to footer" duration="1"/>
    <testCase name="Card Component Integration renders complete card with all subcomponents" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/icon-button/__tests__/IconButton.test.tsx">
    <testCase name="IconButton renders with default props" duration="9"/>
    <testCase name="IconButton applies custom className" duration="8"/>
    <testCase name="IconButton handles onClick event" duration="4"/>
    <testCase name="IconButton disables the button when disabled prop is true" duration="3"/>
    <testCase name="IconButton applies automation-id" duration="3"/>
    <testCase name="IconButton forwards ref to button element" duration="1"/>
    <testCase name="IconButton applies classes based on variant, size, fill and shape" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/ai-components/file-dropzone/__tests__/FileDropZone.test.tsx">
    <testCase name="FileDropZone renders the drop zone with default text" duration="8"/>
    <testCase name="FileDropZone calls onFilesSelected when files are dropped" duration="3"/>
    <testCase name="FileDropZone calls onFilesSelected when files are selected via input" duration="2"/>
    <testCase name="FileDropZone adds dragging class on drag over and removes on drag leave" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/toggle/__tests__/Toggle.test.tsx">
    <testCase name="ButtonToggle renders with default props" duration="4"/>
    <testCase name="ButtonToggle applies correct styles based on variant" duration="3"/>
    <testCase name="ButtonToggle applies correct styles for selected and unselected states" duration="1"/>
    <testCase name="ButtonToggle calls onToggle when a button is clicked" duration="7"/>
    <testCase name="ButtonToggle respects value prop" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/dropdown/__tests__/Dropdown.test.tsx">
    <testCase name="DropdownMenu renders dropdown menu when open" duration="5"/>
    <testCase name="DropdownMenu does not render dropdown menu when closed" duration="1"/>
    <testCase name="DropdownMenu applies custom class name when provided" duration="6"/>
    <testCase name="DropdownMenu positions dropdown below trigger by default" duration="7"/>
    <testCase name="DropdownMenu closes dropdown when Escape key is pressed" duration="3"/>
    <testCase name="DropdownMenu handles keyboard navigation" duration="4"/>
    <testCase name="DropdownMenu forwards ref correctly" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/link/__tests__/Link.test.tsx">
    <testCase name="Link Component renders the link with correct text" duration="3"/>
    <testCase name="Link Component renders with correct href when not disabled" duration="7"/>
    <testCase name="Link Component does not have href attribute when disabled" duration="4"/>
    <testCase name="Link Component renders with correct target and rel attributes" duration="3"/>
    <testCase name="Link Component renders with icon when provided and not inline" duration="2"/>
    <testCase name="Link Component does not render icon when inline" duration="1"/>
    <testCase name="Link Component applies custom className" duration="2"/>
    <testCase name="Link Component forwards ref correctly" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useDebounce.test.ts">
    <testCase name="useDebounce should return initial value immediately" duration="3"/>
    <testCase name="useDebounce should debounce value updates" duration="3"/>
    <testCase name="useDebounce should handle multiple rapid updates" duration="2"/>
    <testCase name="useDebounce should cleanup timeout on unmount" duration="1"/>
    <testCase name="useDebounce should handle delay changes" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/stack/__tests__/Stack.test.tsx">
    <testCase name="Stack Component renders children correctly" duration="4"/>
    <testCase name="Stack Component applies default styling correctly" duration="3"/>
    <testCase name="Stack Component applies custom className" duration="1"/>
    <testCase name="Stack Component applies custom gap value" duration="2"/>
    <testCase name="Stack Component applies alignItems correctly" duration="5"/>
    <testCase name="Stack Component applies justifyContent correctly" duration="2"/>
    <testCase name="Stack Component applies custom flexDirection" duration="2"/>
    <testCase name="Stack Component applies automation-id attribute" duration="1"/>
    <testCase name="Stack Component passes additional props to the div element" duration="1"/>
    <testCase name="Stack Component renders multiple children correctly" duration="2"/>
    <testCase name="Stack Component combines all style properties correctly" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/form/__tests__/FormActionBar.test.tsx">
    <testCase name="FormFooter Component renders children correctly" duration="15"/>
    <testCase name="FormFooter Component applies custom className" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/select/__tests__/MenuItem.test.tsx">
    <testCase name="MenuItem renders children correctly" duration="3"/>
    <testCase name="MenuItem calls onClick when clicked and not disabled" duration="2"/>
    <testCase name="MenuItem does not call onClick when clicked and disabled" duration="1"/>
    <testCase name="MenuItem renders as selected when isSelected is true" duration="5"/>
    <testCase name="MenuItem renders icon when selected and iconSelected is provided" duration="2"/>
    <testCase name="MenuItem applies correct ARIA attributes" duration="3"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/currency-input/__tests__/CurrencyInputUtils.test.ts">
    <testCase name="Currency Input Utility Functions useRunAfterUpdate executes callback after setting it" duration="1"/>
    <testCase name="Currency Input Utility Functions useRunAfterUpdate overwrites previous callback" duration="0"/>
    <testCase name="Currency Input Utility Functions useRunAfterUpdate cleans up when component unmounts" duration="2"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency handles empty values correctly" duration="0"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency handles N/A values" duration="1"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency clears values that start with N or n but are not NA or N/A" duration="0"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency adds dollar sign when showDollarSign is true" duration="1"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency formats values with two decimal places" duration="0"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency removes leading zeros" duration="1"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency formats numbers with commas for thousands" duration="1"/>
    <testCase name="Currency Input Utility Functions formatStringAsCurrency handles input with existing commas" duration="0"/>
    <testCase name="Currency Input Utility Functions formatValueAsBigDecimal returns null for empty, NA, or N/A inputs" duration="0"/>
    <testCase name="Currency Input Utility Functions formatValueAsBigDecimal converts simple numeric strings to numbers" duration="1"/>
    <testCase name="Currency Input Utility Functions formatValueAsBigDecimal removes dollar signs and commas" duration="0"/>
    <testCase name="Currency Input Utility Functions formatValueAsBigDecimal handles negative numbers" duration="1"/>
    <testCase name="Currency Input Utility Functions formatValueAsBigDecimal returns NaN for invalid numeric strings" duration="0"/>
    <testCase name="Currency Input Utility Functions formatValueAsBigDecimal handles null and undefined gracefully" duration="1"/>
    <testCase name="Currency Input Utility Functions onlyNumbersAndDot returns empty string for empty input" duration="0"/>
    <testCase name="Currency Input Utility Functions onlyNumbersAndDot allows valid currency inputs" duration="0"/>
    <testCase name="Currency Input Utility Functions onlyNumbersAndDot rejects invalid currency inputs" duration="0"/>
    <testCase name="Currency Input Utility Functions onlyNumbersAndDot rejects numbers with more than 10 digits" duration="4"/>
    <testCase name="Currency Input Utility Functions onlyNumbersAndDot allows NA values when allowNa is true" duration="1"/>
    <testCase name="Currency Input Utility Functions onlyNumbersAndDot allows N/A values when acceptNaWithSlashFormat is true" duration="0"/>
    <testCase name="Currency Input Utility Functions validateNaValue validates NA formats" duration="1"/>
    <testCase name="Currency Input Utility Functions validateNaValue validates partial NA inputs" duration="0"/>
    <testCase name="Currency Input Utility Functions validateNaValue validates N/A formats when acceptNaWithSlashFormat is true" duration="0"/>
    <testCase name="Currency Input Utility Functions validateNaValue rejects N/A formats when acceptNaWithSlashFormat is false" duration="1"/>
    <testCase name="Currency Input Utility Functions validateNaValue returns original value for invalid inputs" duration="0"/>
    <testCase name="Currency Input Utility Functions numberInputProps provides base input properties" duration="1"/>
    <testCase name="Currency Input Utility Functions numberInputProps adds aria attributes for invalid state" duration="0"/>
    <testCase name="Currency Input Utility Functions numberInputProps adds aria attributes for warning state" duration="0"/>
    <testCase name="Currency Input Utility Functions numberInputProps adds aria attributes for helper text" duration="1"/>
    <testCase name="Currency Input Utility Functions numberInputProps handles different pattern for percentage values" duration="0"/>
    <testCase name="Currency Input Utility Functions numberInputProps combines multiple aria-describedby references correctly" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/file-uploader/__tests__/FileContext.test.tsx">
    <testCase name="FileContext provides the correct initial state" duration="3"/>
    <testCase name="FileContext adds a file correctly" duration="3"/>
    <testCase name="FileContext updates file status correctly" duration="3"/>
    <testCase name="FileContext updates file progress correctly" duration="5"/>
    <testCase name="FileContext shows and clears status message correctly" duration="4"/>
    <testCase name="FileContext deletes a file correctly" duration="3"/>
    <testCase name="FileContext clears all files correctly" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/form-block/__tests__/FormWrapper.test.tsx">
    <testCase name="FormWrapper renders children correctly" duration="12"/>
    <testCase name="FormWrapper applies default base variant class when no variant is provided" duration="1"/>
    <testCase name="FormWrapper applies panel variant class when panel variant is provided" duration="2"/>
    <testCase name="FormWrapper applies additional className when provided" duration="1"/>
    <testCase name="FormWrapper passes additional props to the div element" duration="2"/>
    <testCase name="FormWrapper combines all classes correctly" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/container/__tests__/Container.test.tsx">
    <testCase name="Container component renders its children" duration="3"/>
    <testCase name="Container component applies styling based on props" duration="8"/>
    <testCase name="Container component supports display, justifyContent, and overflow props" duration="3"/>
    <testCase name="Container component passes through additional props" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/text/__tests__/Text.test.tsx">
    <testCase name="Text Component renders with default props" duration="3"/>
    <testCase name="Text Component renders different HTML elements based on &quot;as&quot; prop" duration="2"/>
    <testCase name="Text Component applies custom className" duration="1"/>
    <testCase name="Text Component applies custom style" duration="4"/>
    <testCase name="Text Component passes href and target props to anchor element" duration="2"/>
    <testCase name="Text Component applies automation-id when provided" duration="1"/>
    <testCase name="Text Component applies appropriate classes based on props" duration="1"/>
    <testCase name="Text Component applies default color class when color not provided" duration="0"/>
    <testCase name="Text Component applies size class when provided" duration="0"/>
    <testCase name="Text Component applies weight class when provided" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/file-uploader/__tests__/StatusMessageDisplay.test.tsx">
    <testCase name="StatusMessageDisplay renders nothing when statusMessage is null" duration="2"/>
    <testCase name="StatusMessageDisplay renders StatusMessage when statusMessage is provided" duration="3"/>
    <testCase name="StatusMessageDisplay passes clearStatusMessage as onDismiss prop to StatusMessage" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useRoveFocus.test.tsx">
    <testCase name="useRoveFocus should initialize with focus on the first item" duration="3"/>
    <testCase name="useRoveFocus should move focus down when ArrowDown is pressed" duration="2"/>
    <testCase name="useRoveFocus should move focus up when ArrowUp is pressed" duration="1"/>
    <testCase name="useRoveFocus should wrap to the top when ArrowDown is pressed on the last item" duration="2"/>
    <testCase name="useRoveFocus should wrap to the bottom when ArrowUp is pressed on the first item" duration="1"/>
    <testCase name="useRoveFocus should allow manual focus setting via the returned setter" duration="1"/>
    <testCase name="useRoveFocus should handle size changes appropriately" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useDragAndDrop.test.ts">
    <testCase name="useDragAndDrop should initialize with null values" duration="2"/>
    <testCase name="useDragAndDrop should handle drag start" duration="2"/>
    <testCase name="useDragAndDrop should handle drag over" duration="1"/>
    <testCase name="useDragAndDrop should handle drag end" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/utilities/__tests__/events.test.ts">
    <testCase name="composeEventHandlers should call all handlers when no preventDefault is called" duration="1"/>
    <testCase name="composeEventHandlers should stop calling handlers after preventDefault is called" duration="1"/>
    <testCase name="composeEventHandlers should handle undefined handlers gracefully" duration="0"/>
    <testCase name="composeEventHandlers should pass additional arguments to handlers" duration="1"/>
    <testCase name="composeReactEventHandlers should call all React event handlers when no preventDefault is called" duration="0"/>
    <testCase name="composeReactEventHandlers should stop calling React event handlers after preventDefault is called" duration="1"/>
    <testCase name="composeReactEventHandlers should handle undefined React event handlers gracefully" duration="0"/>
    <testCase name="composeReactEventHandlers should pass additional arguments to React event handlers" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useAccordionItem.test.ts">
    <testCase name="useAccordionItem should set item as open when open prop is true" duration="3"/>
    <testCase name="useAccordionItem should handle click to open item" duration="1"/>
    <testCase name="useAccordionItem should handle click to close item" duration="1"/>
    <testCase name="useAccordionItem should call onHeadingClick callback when provided" duration="1"/>
    <testCase name="useAccordionItem should handle Escape key to close item" duration="1"/>
    <testCase name="useAccordionItem should not handle Escape key when item is closed" duration="1"/>
    <testCase name="useAccordionItem should reflect correct open state" duration="0"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/input-fields/utils/__tests__/mask-utils.test.ts">
    <testCase name="Mask Utility Functions getMask should return correct mask for credit card" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return correct mask for social security number" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return correct mask for phone number" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return correct mask for zip code" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return correct mask for date" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return correct mask for date-time" duration="1"/>
    <testCase name="Mask Utility Functions getMask should return correct mask for time" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return empty string for currency" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return empty string for percent" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return custom format for custom type" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return empty string for custom type without custom format" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return empty string for null or undefined input" duration="0"/>
    <testCase name="Mask Utility Functions getMask should return empty string for unknown input type" duration="0"/>
    <testCase name="Mask Utility Functions getMaskFromFormat should return correct mask for MM/DD/YYYY" duration="1"/>
    <testCase name="Mask Utility Functions getMaskFromFormat should return correct mask for DD/MM/YYYY" duration="0"/>
    <testCase name="Mask Utility Functions getMaskFromFormat should return correct mask for YYYY-MM-DD" duration="0"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/file-uploader/__tests__/StatusMessage.test.tsx">
    <testCase name="StatusMessage renders correctly with success props" duration="8"/>
    <testCase name="StatusMessage renders correctly with error props" duration="3"/>
    <testCase name="StatusMessage calls onDismiss when dismiss button is clicked" duration="7"/>
    <testCase name="StatusMessage has correct accessibility attributes" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useFileValidation.test.ts">
    <testCase name="useFileValidation validateFile should validate file size" duration="3"/>
    <testCase name="useFileValidation validateFile should validate file type" duration="1"/>
    <testCase name="useFileValidation validateFile should check for duplicates" duration="1"/>
    <testCase name="useFileValidation validateFile should allow valid files" duration="1"/>
    <testCase name="useFileValidation validateFileList should validate number of files" duration="1"/>
    <testCase name="useFileValidation validateFileList should validate custom file list validation" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/utilities/__tests__/merge-refs.test.tsx">
    <testCase name="mergeRefs in Component Context verifies the mergeRefs utility works with object refs and callback refs" duration="1"/>
    <testCase name="mergeRefs in Component Context directly manipulates component state to verify ref functionality" duration="10"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/components/badge/Badge.test.tsx">
    <testCase name="Badge Component renders the Badge component with the correct text" duration="4"/>
    <testCase name="Badge Component renders the Badge component with the correct variant and shape" duration="1"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/utilities/__tests__/get-display-error-message.test.ts">
    <testCase name="getDisplayErrorMessage returns empty string for undefined or null error" duration="0"/>
    <testCase name="getDisplayErrorMessage returns message property from FieldError object" duration="0"/>
    <testCase name="getDisplayErrorMessage returns type property if message is not available" duration="0"/>
    <testCase name="getDisplayErrorMessage handles nested FieldErrors objects from react-hook-form" duration="0"/>
    <testCase name="getDisplayErrorMessage handles React nodes" duration="0"/>
    <testCase name="getDisplayErrorMessage stringifies complex error objects" duration="0"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/hooks/__tests__/useAutofillSync.tsx">
    <testCase name="useAutofillSync syncs input value to form state if different" duration="5"/>
    <testCase name="useAutofillSync does not call setValue if values match" duration="2"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/utilities/__tests__/focus.test.ts">
    <testCase name="focus should focus an HTMLElement directly" duration="1"/>
    <testCase name="focus should focus an element from a React ref" duration="1"/>
    <testCase name="focus should not focus if element is already focused" duration="0"/>
    <testCase name="focus should handle null ref gracefully" duration="0"/>
    <testCase name="focus should handle null element gracefully" duration="0"/>
    <testCase name="focus should handle undefined element gracefully" duration="0"/>
    <testCase name="focus should handle elements without focus method" duration="0"/>
    <testCase name="focus should work with custom HTMLElements" duration="0"/>
  </file>
  <file path="/Users/nicholasj.pino/Desktop/Web Development/super-design-system/packages/sds-ui/src/utilities/__tests__/match.test.ts">
    <testCase name="matches function returns true when event matches one of the keys" duration="1"/>
    <testCase name="matches function returns false when event does not match any of the keys" duration="0"/>
    <testCase name="matches function works with an array of key strings" duration="0"/>
    <testCase name="matches function matches based on which property" duration="1"/>
    <testCase name="matches function matches based on keyCode property" duration="0"/>
    <testCase name="matches function returns false for an empty array of keys to match" duration="0"/>
  </file>
</testExecutions>